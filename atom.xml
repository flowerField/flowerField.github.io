<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花田半亩</title>
  
  <subtitle>文顶顶的Blog</subtitle>
  <link href="https://weibo.com/u/3800117445/atom.xml" rel="self"/>
  
  <link href="https://weibo.com/u/3800117445/"/>
  <updated>2022-04-04T02:58:36.015Z</updated>
  <id>https://weibo.com/u/3800117445/</id>
  
  <author>
    <name>文顶顶</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机系统 流水线技术</title>
    <link href="https://weibo.com/u/3800117445/2022/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/"/>
    <id>https://weibo.com/u/3800117445/2022/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/</id>
    <published>2022-03-31T15:45:13.000Z</published>
    <updated>2022-04-04T02:58:36.015Z</updated>
    
    <content type="html"><![CDATA[<p class='tip'>本文介绍计算机系统中采用的流水线技术，包括流水线相关的基础知识、工作原理、流水线技术对性能的改进、吞吐率、加速比和效率等相关的计算以及存在的问题等内容。</p><img src='../../../../src/lsx_01.png'><h2 id="流水线技术简单介绍"><a href="#流水线技术简单介绍" class="headerlink" title="流水线技术简单介绍"></a>流水线技术简单介绍</h2><p>流水线技术通过并行硬件(利用时间并行性，区别于空间并行性)来提高计算机系统的性能。</p><p>流水线技术把一项任务分解成若干项顺序执行的子任务，不同的子任务由不同的操作部件来负责执行，而这些部件可以同时并行工作，这项技术的关键在于<code>重叠执行</code>，通过这种方式可以在不增加硬件或者只增加少量硬件的前提下数倍的提升处理机运算速度。</p><img src='../../../../src/lsx_03.png'><h2 id="流水线的分级"><a href="#流水线的分级" class="headerlink" title="流水线的分级"></a>流水线的分级</h2><p>根据使用情况的不同，流水线可以分成三个级别：</p><p><strong>（1）操作部件级流水线(运算符操作流水线)</strong> 将复杂的算术运算和逻辑运算组成流水线的工作方式。<br><strong>（2）指令级流水线</strong> 把一条指令的执行过程分解成多个阶段，比如可以把某个指令分解为：取指令、分析指令、执行指令三个阶段。<br><strong>（3）处理机间级流水线(宏流水线)</strong> 由 N(N&gt;=2)个处理机通过存储器串行连接，每个处理机完成某项专门的任务，各个处理机所得到的结果需要存放到跟下一个处理机所共享的存储器里面。</p><h2 id="流水线的分类"><a href="#流水线的分类" class="headerlink" title="流水线的分类"></a>流水线的分类</h2><p>根据流水线的实际应用，可以从不同角度进行分类。</p><p><strong>静态流水线</strong>：在同一时间内只能按照一种运算的连接方式进行工作（一定是单功能）。<br><strong>动态流水线</strong>：在同一时间内允许按照多种不同运算的连接方式工作（一定是多功能）。</p><img src='../../../../src/lsx_10.png'><p><strong>线性流水线</strong>：从输入到输出，每个功能段只允许经过一次，不存在反馈回路。<br><strong>非线性流水线</strong>：从输入到输出，某些功能段将数次通过流水线，存在反馈回路，常用于递归调用。</p><p><strong>单功能流水线</strong>：只能实现某种固定的功能，比如加法运算。<br><strong>多功能流水线</strong>：各段可以进行不同的连接，通过不同的连接方式来实现不同的功能（资源利用率较高也更灵活，但控制更复杂）。</p><h2 id="流水线的特点和工作原理"><a href="#流水线的特点和工作原理" class="headerlink" title="流水线的特点和工作原理"></a>流水线的特点和工作原理</h2><ul><li><p>流水线中处理的必须是连续的任务。</p></li><li><p>在流水线每个操作部件的后面，都要有一个缓冲寄存器（锁存器），称为流水寄存器，这个缓冲寄存器用于保存本阶段的执行结果，以保证各个部件之间的速度是匹配的，以及各个部件独立、并行运行。换句话说，流水寄存器用于在相邻的两段“操作”之间传送数据，以保证提供后面要用到的数据的供应，并把各段的处理工作相互隔离。</p></li><li><p>因为流水线的主要工作方式是把大的操作任务分解为多个独立的、小的操作部件，依靠多个操作部件并行工作来缩短程序执行时间的。因为流水线中各段的执行时间应该尽量相等，执行时间最长的一段将成为整个流水线的瓶颈。</p></li><li><p>流水技术适合于大量重复的时序过程，只有在输入端连续不断提供任务的情况下，才能充分发挥流水线的效率。</p></li><li><p>流水线中存在排入时间和排空时间。</p></li></ul><img src='../../../../src/lsx_04.png'><p>上面这张图是我画的抽象之后的典型 5 级 CPU 执行流水线，但这张图其实没有办法表述清楚“多道工序同时执行”这个流水线技术最重要的特征，所以下面我通过<code>时空图</code>来描述流水线的工作。流水线的处理方向与之相对应的是多个任务按照顺序挨个执行。<br><img src='../../../../src/lsx_05.png'><br>我们假设某个处理机的执行指令分成三个阶段，分别是取指、分析和执行，假设每个阶段执行需要时间都是 t，那么上面左侧的图片描述的指令顺序执行的时空图，上面右侧的图片描述的是指令流水线执行的时空图。<br>我们可以通过上面的图示看出，顺序执行 3 条指令，需要的时间是 9t，流水线方式执行需要的时间是 5t，流水线采用的执行方式其实就是取指、分析和执行三个阶段部件在同时并发的工作，在第 1 条指令的执行阶段，同时分析第 2 条指令，取第 3 条指令。</p><p>如果不好理解的话，可以把这个场景类比为一个三个人 A\B\C 在对苹果进行操作的过程，其中 A 负责把苹果放入到水槽中，B 负责清洗水槽中的苹果，C 负责把水槽中的苹果捞起来装到袋子中，每次只能操作一个苹果。严格的顺序执行，类似于 A 在做“把第一个苹果放入到水槽中”这个动作的时候，B 和 C 处于等待的状态，当这个动作完成后，B 执行“清洗水槽中的这个苹果”这个操作，此时 A 处于无事可做的状态，C 处于等待的状态，当清洗完成后，C 开始执行“把水槽中的苹果捞起来装到袋子中”这个动作，此时 A 和 B 处于空闲的状态。</p><img src='../../../../src/lsx_06.png'><p>假设有 n 个苹果需要处理，每个苹果处理的三个阶段的单位时间都是 t，那么：</p><p>顺序执行的工作方式需要的时间为：<code>n x 3 x t</code><br>流水线执行工作方式需要的时间可以这样计算：<code>3 x t + (n-1) x t</code></p><p>这里在进行计算的时候，其实我们涉及到了多个参与量，它们包括<code>指令的数量</code>、<code>指令的执行阶段</code>、<code>每个指令执行阶段需要的单位时间</code>，在上面的案例中，指令的数量为 3 条，指令的执行阶段为 3 个，每个指令执行阶段需要的单位时间我们假设都是相等的。接下来，我们来看一个稍微复杂点的情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">假设：</span><br><span class="line">指令的数量(n)：4 条</span><br><span class="line">指令的执行阶段(k)：4 个</span><br><span class="line">每个指令执行阶段需要的单位时间：为 t</span><br></pre></td></tr></table></figure><img src='../../../../src/lsx_07.png'><p>我们来看个更复杂的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">假设：</span><br><span class="line">指令的数量(n)：3 条</span><br><span class="line">指令的执行阶段(k)：4 个</span><br><span class="line">每个指令执行阶段需要的单位时间：A(1t) B(3t) C(2t) D(1t)</span><br></pre></td></tr></table></figure><img src='../../../../src/lsx_08.png'><p>备注：Tk = n(t1 + t2 + t3 +..tk) + (n -1)max(t1，t2，···tk)</p><p>由此，我们可以总结出一个指令流水线完成 n 个任务所需要总时间的计算公式：</p><img src='../../../../src/lsx_09.png'><p>另外，从上图我们也能看出，流水线的性能瓶颈取决于多个操作中每个执行阶段所需要的最长单位时间(<code>取 t1，t2，t3，t4，···tk 的最大值</code>)，在设计流水线的时候应该尽可能的让每个操作的执行单位时间都相等。</p><h2 id="流水线的性能指标"><a href="#流水线的性能指标" class="headerlink" title="流水线的性能指标"></a>流水线的性能指标</h2><p>我们可以通过吞吐率、加速比和流水线的效率等指标衡量某段流水线性能的优劣。</p><p><strong><div style='background:#42b983;color:#fff'>吞吐率（ Though Put rate， TP ）</div></strong></p><p>吞吐率指的是在单位时间内流水线所完成的任务数量或输出的结果数量。<br>吞吐率的计算公式为：</p><img src='../../../../src/lsx_14.png'><p>其中，n 表示任务(指令)的数量。</p><p>假设，现在有一条线性流水线共分成 k 段，各段的执行时间分别是 t1，t2，···tk，那么该流水线完成 n 个连续任务需要的总时间为：</p><img src='../../../../src/lsx_11.png'><p>通过推断，我们可以得出该流水线的实际吞吐率为：</p><img src='../../../../src/lsx_16.png'><p>此时，该流水线的最大吞吐率为：<br><img src='../../../../src/lsx_17.png'></p><p>从上面的公式可以看出，当流水线中各段执行时间不完全相等的时候，吞吐率主要由流水线中执行最长的那个功能段来决定，这个功能段也就成了整个流水线的瓶颈，它的执行时间被称为瓶颈时间。解决可以问题，可以考虑把瓶颈段再进行细分，让瓶颈的时间变小。</p><p><strong>说明</strong> 流水线的实际吞吐率要小于最大吞吐率。只有当 n &gt;= k 的时候，它们才约等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">假设现在有一条 6 段线性流水线，它们的单位执行时间分别是 1ns，2ns，3ns，4ns，3ns，2ns，那么:</span><br><span class="line">该流水线完成 10 个连续任务需要的总时间 = (1 + 2 + 3 + 4 + 3 + 2) + (10 -1)4 = 15 + 36 = 51ns</span><br><span class="line">该流水线的实际吞吐率 = 10 / 51 = 0.196</span><br><span class="line">该流水线的最大吞吐率 = 1 / 4 = 0.25</span><br></pre></td></tr></table></figure><p>比较理想的情况是，一条 k 段连续流水线中的每段执行时间均相等(设为 t)，那么：<br>该流水线完成 n 个连续任务需要的总时间可以表示为：<br><img src='../../../../src/lsx_12.png'><br>因此，实际的吞吐率为：<br><img src='../../../../src/lsx_13.png'><br>此时，最大的吞吐率为：<br><img src='../../../../src/lsx_15.png'></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">假设上面这段流水线中每一段执行时间都是等量的，比如 2ns，那么我们再计算一遍：</span><br><span class="line">该流水线完成 10 个连续任务需要的总时间 = (2 + 2 + 2 + 2 + 2 + 2) + (10 -1)2 = 12 + 18 = 30ns</span><br><span class="line">该流水线的实际吞吐率 = 10 / 30 = 0.333</span><br><span class="line">该流水线的最大吞吐率 = 1 / 2 = 0.5</span><br></pre></td></tr></table></figure><p><strong><div style='background:#42b983;color:#fff'>加速比（ Speedup Ratio， S ）</div></strong></p><p>加速比是衡量流水线性能的另一个关键指标，它其实指的是不使用流水线(顺序)执行和使用流水线来执行同一段任务所用总时间的比。</p><p>计算流水线加速比的基本公式为：<br><img src='../../../../src/lsx_18.png'></p><p>当流水线的各个流水段的执行时间不相等的时候，一条 k 段线性流水线完成 n 个连续任务的实际加速比可以表示为：<br><img src='../../../../src/lsx_21.png'></p><img src='../../../../src/lsx_35.png'>假设，某流水线分为 5 段，若每一段所需要的时间分别为 1ns、2ns、3ns、4ns、2ns，那么该流水线的加速比为：<img src='../../../../src/lsx_22.png'><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">假设现在有一条 4 段线性流水线，它们的单位执行时间分别是 1ns，2ns，3ns，1ns 那么:</span><br><span class="line">顺序执行完成 10 个连续任务需要的总时间 = (1 + 2 + 3 + 1) _ 10 = 70</span><br><span class="line">该流水线完成 10 个连续任务需要的总时间 = (1 + 2 + 3 + 1) + 3 _ (10 -1) = 34</span><br><span class="line">该流水线的实际加速比 = 70 / 34</span><br><span class="line"></span><br><span class="line">备注：3 的值来自于取(1ns，2ns，3ns，1ns)中的最大值</span><br></pre></td></tr></table></figure><p>同理，理想的情况是，一条 k 段连续流水线中的每段执行时间均相等(设为 t)，那么：<br>该流水线完成 n 个连续任务的实际加速比为：<br><img src='../../../../src/lsx_19.png'></p><img src='../../../../src/lsx_34.png'><p>这种情况下的最大的加速比为：<br><img src='../../../../src/lsx_20.png'></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">假设现在有一条 4 段线性流水线，它们的单位执行时间都是 1ns 那么:</span><br><span class="line">顺序执行完成 10 个连续任务需要的总时间 = (1 + 1 + 1 + 1) _ 10 = 40</span><br><span class="line">该流水线完成 10 个连续任务需要的总时间 = (1 + 1 + 1 + 1) + 1 _ (10 -1) = 13</span><br><span class="line">该流水线的实际加速比 = 40 / 13</span><br></pre></td></tr></table></figure><p><strong><div style='background:#42b983;color:#fff'>效率（E）</div></strong></p><p>流水线的效率指的是流水线的设备利用率，流水线的效率包含时间和空间两部分的因素。<br>流水线的效率被定义为 n 项任务所占用的时空区与 k 个流水段总的时空区之比。<br>实际上，n 项任务所占用的时空区其实就是顺序执行 n 项任务所使用的总时间。</p><p>计算流水线效率的一般公式为：<br><img src='../../../../src/lsx_24.png'></p><p>如果流水线各段的执行时间不相等，那么连续执行 n 项任务时的流水线效率为：<br><img src='../../../../src/lsx_29.png'></p><img src='../../../../src/lsx_36.png'><p>如果流水线中的每段执行时间均相等(设为 t)，而且输入的 n 项任务是连续的，那么一条 k 段流水线的效率为：<br><img src='../../../../src/lsx_25.png'></p><img src='../../../../src/lsx_37.png'><p>此时，流水线的最高效率为:<br><img src='../../../../src/lsx_26.png'></p><p>由上面的数学公式可以看出，当流水线的效率达到最大值 1 的时候，这时流水线的各段均处于忙碌的状态。</p><p>结合计算流水线加速比的公式，流水线的效率可以表示为:<br><img src='../../../../src/lsx_28.png'></p><p>公式转换一下，则流水线的吞吐率可以理解为流水线的效率和单位时间的比值。</p><img src='../../../../src/lsx_27.png'><p>从上面的公式，我们可以看出当时钟周期 t 不变的时候，<code>流水线的效率与吞吐率成正比</code>。</p><p>吞吐率、加速比和效率这些指标都可以用来衡量一条流水线的性能，为了得到比较高的性能，流水线应该尽可能满负荷工作。</p><p>综合来看，增加流水线的段数(k 的值)，流水线的吞吐率和加速比都能提高，但因为每个操作段的输出端都必须要设置一个锁存器（缓冲寄存器），因此当段数增多的时候，锁存器（缓冲寄存器）的总延迟时间也会随之增加，且增加锁存器（缓冲寄存器）的数量，不可避免的要增加流水线的价格成本。因此，在设计流水线的时候需要综合考虑各方便的因素，以选择流水线的最佳段数。</p><p>系统中也可能存在多条流水线，<code>假如采用度量为i的超标量流水线处理机来连续处理n条指令，那么因为同时运行了i条流水线，因此平均每条流水线只需要执行n/i条指令</code>。</p><p>此外，在实际的情况中，还需要注意流水线中的各段可能会相互影响，阻塞流水线以影响性能。</p><hr><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;tip&#39;&gt;本文介绍计算机系统中采用的流水线技术，包括流水线相关的基础知识、工作原理、流水线技术对性能的改进、吞吐率、加速比和效率等相关的计算以及存在的问题等内容。&lt;/p&gt;

&lt;img src=&#39;../../../../src/lsx_01.png&#39;&gt;

&lt;h2</summary>
      
    
    
    
    
    <category term="计算机系统" scheme="https://weibo.com/u/3800117445/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>杂谈书坊-“陷王于恶”</title>
    <link href="https://weibo.com/u/3800117445/2021/03/28/%E6%9D%82%E8%B0%88%E4%B9%A6%E5%9D%8A-%E9%99%B7%E7%8E%8B%E4%BA%8E%E6%81%B6%E5%92%8C%E8%90%A5%E6%83%91%E8%AF%B8%E4%BE%AF/"/>
    <id>https://weibo.com/u/3800117445/2021/03/28/%E6%9D%82%E8%B0%88%E4%B9%A6%E5%9D%8A-%E9%99%B7%E7%8E%8B%E4%BA%8E%E6%81%B6%E5%92%8C%E8%90%A5%E6%83%91%E8%AF%B8%E4%BE%AF/</id>
    <published>2021-03-28T15:58:37.000Z</published>
    <updated>2021-12-17T02:01:47.662Z</updated>
    
    <content type="html"><![CDATA[<p><a href="">“陷王于恶”</a> 这个典故出自汉书,叙述了海昏侯<strong>刘贺</strong>被霍光废黜的故事。</p><p><strong>贺者，武帝孙，昌邑哀王子也。既至，即位，行淫乱。光忧懑，独以问所亲故吏大司农田延年。延年曰：“将军为国柱石，审此人不可，何不建白太后，更选贤而立之？” 光曰：“今欲如是，于古尝有此否？” 延年曰：“伊尹相殷，废太甲以安宗庙，后世称其忠。将军若能行此，亦汉之伊尹也”。光乃引延年给事中，阴与车骑将军张安世图计，遂召丞相、御史、将军、列侯、中二千石、大夫、博士会议未央宫。光曰：“昌邑王行昏乱，恐危社稷，如何？” 群臣皆惊鄂失色，莫敢发言，但唯唯而已。田延年前，离席按剑，曰：“先帝属将军以幼孤，寄将军以天下，以将军忠贤能安刘氏也。今群下鼎沸，社稷将倾，且汉之传谥常为孝者，以长有天下，令宗庙血食也。如令汉家绝祀，将军虽死，何面目见先帝于地下乎？今日之议，不得旋踵。群臣后应者，臣请剑斩之”。光谢曰：“九卿责光是也。天下匈匈不安，光当受难”。于是议者皆叩头，曰：“万姓之命在于将军，唯大将军令”。</strong></p><p><strong>光即与群臣俱见白太后，具陈昌邑王不可以承宗庙状。皇太后乃车驾幸未央承明殿，诏诸禁门毋内昌邑群臣。王入朝太后还，乘辇欲归温室，中黄门宦者各持门扇，王入，门闭，昌邑群臣不得入。王曰“何为？” 大将军跪曰：“有皇太后诏，毋内昌邑群臣”。王曰：“徐之，何乃惊人如是!” 光使尽驱出昌邑群臣，置金马门外。车骑将军安世将羽林骑收缚二百余人，皆送廷尉诏狱。令故昭帝侍中中臣侍守王。光敕左右：“谨宿卫，卒有物故自裁，令我负天下，有杀主名”。王尚未自知当废，谓左右：“我故群臣从官安得罪，而大将军尽系之乎？” 顷之，有太后诏召王，王闻召，意恐，乃曰：“我安得罪而召我哉!” 太后被珠襦，盛服坐武帐中，侍御数百人皆持兵，期门武士陛戟，陈列殿下。群臣以次上殿，召昌邑王伏前听诏。光与群臣连名奏王，尚书令读奏。</strong></p><p><strong>皇太后诏曰：“可”。光令王起拜受诏，王曰：“闻天子有争臣七人，虽无道不失天下”。光曰：“皇太后诏废，安得天子!” 乃即持其手，解脱其玺组，奉上太后，扶王下殿，出金马门，群臣随送。王西面拜，曰：“愚戆不任汉事”。起就乘舆副车。大将军光送至昌邑邸，光谢曰：“王行自绝于天，臣等驽怯，不能杀身报德。臣宁负王，不敢负社稷。愿王自爱，臣长不复见左右”。光涕泣而去。群臣奏言：“古者废放之人屏于远方，不及以政，请徙王贺汉中房陵县”。太后诏归贺昌邑，赐汤沐邑二千户。<span style="color:red">昌邑群臣坐亡辅导之谊，陷王于恶，光悉诛杀二百余人</span>。出死，号呼市中曰：“当断不断，反受其乱”。</strong></p><p>这段文字记载于《<a href="http://www.oh100.com/peixun/guoxuezhihui/294243.html">汉书·霍光金日禪传</a>》，完整的记录了大将军霍光废黜刘贺的详细过程。2015年，在江西南昌发现了轰动一时的海昏侯墓，而刘贺正是这海昏侯墓的主人。关于海昏侯墓的相关信息，大家可以查询。</p><p>刘贺是汉武帝的孙子，其父刘髆为昌邑哀王[<code>今山东菏泽</code>]，刘贺在历史上短暂的做过27天皇帝，后因为言行昏(淫)乱被大将军霍光和太后废黜。据记载，刘贺被废的主要原因是先帝刚驾崩棺材都还停放在宫中的时候就迫不及待的和乐人寻欢作乐，被朝臣认为没有“人主之尊”。说起来，我们现在所经历的一些现实就很魔幻了。据说，现在很多地方在治办丧事的时候，都喜欢把丧事办的喜庆风光，因此网络上也流传了很多坟头蹦迪的鬼畜视频出来。这真是，先人的棺材板都还没盖上，后来人就一蹦跳起了三丈高。</p><p>我今天知道这个这个典故，是读了秋原先生著的《乱世靡音》，这本书讲了江湖中“艺人”的生存之道和历史演变，颇有意思。</p><img src='../../../../src/qy.jpg' height="500px"><p>古时候，”江湖艺人”的身份低位，仅仅只有少数造诣极高的艺人，才可能得到有限的尊重，不像现在的明星这么风光，他们的身份地位几乎排在最末，甚至连现在的某些平台主播也不如。</p><p>其实，哪怕是最牛逼的艺人(为皇帝和朝臣服务的官伶)，可能下场也比较凄凉。譬如上述<strong>“陷王于恶”</strong>的这两百多人就半数都是“乐人”，他们的结局是被 **<span style="color:red"> 悉数诛杀 </span>**。</p><p>最后，再贴点学到的新知识。</p><p><a href="">※</a> 献艺和卖艺，前者有很高的雅兴，后者是鄙俗的生意。<br><a href="">※</a> “玩意儿”这个词同”玩艺儿”，指的是稍微有些才能的乞丐。<br><a href="">※</a> 长期以来以艺娱人低人一等。这也是古时候罪犯抄家为什么男的杀头，妻女则送入教坊司的原因。<br><a href="">※</a> 以艺娱人的人被称为乐人或乐工，职业会被编入乐户，算作贱民，而管理乐户的机构就叫做乐府。<br><a href="">※</a> 艺人主要有三种起源分别是“人类古老的祭祀活动、人们对身体残障者的嘲弄以及流民行乞的手段”。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home%EF%BC%9Ffrom=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;&quot;&gt;“陷王于恶”&lt;/a&gt; 这个典故出自汉书,叙述了海昏侯&lt;strong&gt;刘贺&lt;/strong&gt;被霍光废黜的故事。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;贺者，武帝孙，昌邑哀王子也。既至，即位，行淫乱。光忧懑，独以问所亲故吏大司农田延年。延年曰：“将军为国柱石，审此</summary>
      
    
    
    
    
    <category term="读书笔记" scheme="https://weibo.com/u/3800117445/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - require</title>
    <link href="https://weibo.com/u/3800117445/2020/08/15/Gossip%20-%20commonJS%E8%A7%84%E8%8C%83%E5%92%8Crequire%E5%87%BD%E6%95%B0%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>https://weibo.com/u/3800117445/2020/08/15/Gossip%20-%20commonJS%E8%A7%84%E8%8C%83%E5%92%8Crequire%E5%87%BD%E6%95%B0%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%BF%87%E7%A8%8B/</id>
    <published>2020-08-14T16:00:08.000Z</published>
    <updated>2021-12-16T09:45:36.464Z</updated>
    
    <content type="html"><![CDATA[<div class='tip'>今晚接到个面试电话，被问到<span style="color:red"> node中 require函数的加载过程？</span>一两年前有研究过这部分，真的忘记了。刚刚重新调试查看了下这部分的源码，简单总结下大概的过程。</div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.会默认调用require函数，其实是Module.prototype.require方法</span><br><span class="line">2.Module._load 调用模块加载方法，最终返回的是module.exports</span><br><span class="line">3.Module._resolveFilename 解析文件名参数，转换为绝对路径后按优先级默认尝试添加 .js .json .node</span><br><span class="line">4.Module._cache 判断是否存在缓存,如果有缓存，那么就直接返回上次require的结果</span><br><span class="line">5.如果没有缓存，那么就通过new Module 来创建模块(对象)，主要的实例成员为id 和 exports</span><br><span class="line">6.对新创建的模块进行缓存处理</span><br><span class="line">7.尝试加载模块(Module.prototype.load)</span><br><span class="line">8.Module._extensions 获取当前模块的扩展名并根据扩展名调用对应的方法</span><br><span class="line">9.通过fs.readFileSync获取具体的内容</span><br><span class="line">10.module._compile</span><br><span class="line">11.将具体的内容包裹到函数中 (function (exports, require, module, __filename, __dirname) &#123;&#125;)</span><br><span class="line">12.执行函数fn.call(exports, exports, require, module, __filename, __dirname)</span><br><span class="line">13.最终返回 module.exports;</span><br></pre></td></tr></table></figure><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;tip&#39;&gt;今晚接到个面试电话，被问到&lt;span style=&quot;color:red&quot;&gt; node中 require函数的加载过程？&lt;/span&gt;一两年前有研究过这部分，真的忘记了。刚刚重新调试查看了下这部分的源码，简单总结下大概的过程。&lt;/div&gt;

&lt;fi</summary>
      
    
    
    
    
    <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Node系列-npm+</title>
    <link href="https://weibo.com/u/3800117445/2020/07/13/Node%E7%B3%BB%E5%88%97-npm+/"/>
    <id>https://weibo.com/u/3800117445/2020/07/13/Node%E7%B3%BB%E5%88%97-npm+/</id>
    <published>2020-07-13T08:21:13.000Z</published>
    <updated>2021-12-16T09:45:36.470Z</updated>
    
    <content type="html"><![CDATA[<div class='tip'>本文作为作为[Node系列-npm](http://wendingding.com/2018/11/24/Node%E7%B3%BB%E5%88%97-npm/)的补充，介绍NPM系列核心工具(`npm`、`nrm`、`npx`和`nvm`)的基本使用和常用的命令。</div><div class='titleX'>**核心工具**</div><p><strong><a href="https://www.npmjs.com/">npm</a>(<code>node package manager</code>)</strong> Node的包管理工具，我们可以利用该工具来搜索、下载、安装、卸载和升级包，在下载和安装Node的时候<code>npm</code>会捆绑在一起默认安装。</p><p><strong><a href="https://www.npmjs.com/package/nrm">nrm</a>(<code>npm registry manager</code>)</strong> Node的镜像源管理工具，如果访问国外的包速度太慢，那么可以考虑利用<code>nrm</code>来切换镜像源。</p><p><strong><a href="https://github.com/nvm-sh/nvm/blob/master/README.md">nvm</a>(<code>node version management</code>)</strong> 是Mac下的用来管理不同版本<code>node</code>的工具，如果是管理 Windows系统，可以使用<code>nvmw</code>或<code>nvm-windows</code>。</p><p><strong><a href="https://www.npmjs.com/package/npx">npx</a></strong>  从5.2版开始，<code>npm</code> 增加了 <code>npx</code>，该工具主要用来执行包(二进制文件)。</p><div class='titleX'>**NPM 核心命令**</div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">npm init                    交互创建package.json文件</span><br><span class="line">npm init -y                 默认创建package.json文件</span><br><span class="line">npm --<span class="built_in">help</span>                  查看帮助信息</span><br><span class="line">npm --version               查看版本信息，别名为-v</span><br><span class="line">npm cache clean             清除缓存</span><br><span class="line">npm cache verify            验证缓存</span><br><span class="line">npm cache clean --force     强制清除缓存</span><br><span class="line">npm search xx               搜索关键字相关的包</span><br><span class="line">npm view   xx               查看指定包最新版本的信息(版本、作者、地址等)</span><br><span class="line">npm info   xx               同上，别名view、v、info、和show</span><br><span class="line">npm ls                      列出本地(当前项目)安装的所有包</span><br><span class="line">npm ls -g                   列出全局安装的所有包</span><br><span class="line">npm list -g --depth 0       列出全局安装的所有包  控制显示层级</span><br><span class="line"></span><br><span class="line">npm i xx                    安装指定的包(本地安装)  i=== install</span><br><span class="line">npm install xx              安装指定的包(本地安装-项目依赖)  默认--save === -S</span><br><span class="line">npm install xx -g           安装指定的包(全局安装)</span><br><span class="line">npm install xx --save-dev   安装指定的包(本地安装-开发依赖)  --save-dev === -D</span><br><span class="line">npm install xx -D           安装指定的包(本地安装-开发依赖) </span><br><span class="line">npm uninstall xx            卸载指定的包，别名un, unlink, remove, rm, r</span><br><span class="line">npm install                 根据package.json文件来安装所有需要的包</span><br><span class="line"></span><br><span class="line">npm config ls               查看配置信息   ls === list</span><br><span class="line">npm config ls -l            查看所有的配置信息</span><br><span class="line">npm config <span class="built_in">set</span> xx           设置配置项  config === c</span><br><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npm.taobao.org/    切换镜像源为taobao镜像</span><br><span class="line">npm config get registry     查看当前镜像源</span><br><span class="line">npm config get home         查看当前主页(home)地址</span><br><span class="line"></span><br><span class="line">npm update xx               更新指定的包</span><br><span class="line">npm update                  更新所有项目依赖包 等价于npm update --save</span><br><span class="line">npm update --save-dev       更新所有生产依赖包</span><br><span class="line">npm update -g               更新全局包</span><br><span class="line"></span><br><span class="line">npm adduser                 注册用户</span><br><span class="line">npm publish                 发布模块</span><br><span class="line">npm root                    查看本地项目中包的安装路径</span><br><span class="line">npm root -g                 查看全局包的安装路径</span><br><span class="line">npm docs jquery             打开查看指定包的官网(官方文档)</span><br><span class="line"></span><br><span class="line">npm run &lt;<span class="built_in">command</span>&gt;           执行命令(参考package.json文件中scripts中的配置)</span><br><span class="line">npm pack                    打包</span><br><span class="line">npm link                    链接本地包</span><br><span class="line">npm unlink                  卸载本地包</span><br><span class="line">env                         查看环境变量</span><br></pre></td></tr></table></figure><div class='titleX'>**NRM 核心命令**</div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nrm --<span class="built_in">help</span>                          查看帮助信息</span><br><span class="line">nrm ls                              列出所有的镜像源</span><br><span class="line">nrm current                         列出当前使用的镜像源</span><br><span class="line">nrm use xx                          切换并使用某个特定的镜像源 等同于 npm config <span class="built_in">set</span> registry=</span><br><span class="line">nrm add wen http://wendingding.com  添加新的镜像源  wen是名称，后面跟的是URL路径</span><br><span class="line">nrm del wen                         删除指定镜像源</span><br><span class="line">nrm <span class="built_in">test</span> taobao                     测试指定镜像源的速度</span><br></pre></td></tr></table></figure><div class='titleX'>**NVM的安装**</div><p><strong>参考</strong>：<a href="https://github.com/creationix/nvm">NVM的GitHub官方仓库</a><br><strong>参考</strong>：<a href="https://github.com/coreybutler/nvm-windows">nvm-windows官方仓库</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash</span><br></pre></td></tr></table></figure><p>通过curl来安装nvm，安装完毕后会自动配置环境变量，通过下面的命令来查看<code>.bash_profile</code>文件，可以看到配置文件中已经新增加了环境变量的配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~                            切换到根目录</span><br><span class="line">open .bash_profile              打开配置文件</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面列出的是.bash_profile文件的拟任</span></span><br><span class="line"><span class="comment"># Add Visual Studio Code (code)</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/Applications/Visual Studio Code.app/Contents/Resources/app/bin&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/opt/openssl/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:/usr/<span class="built_in">local</span>/MongoDB/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm ..</span></span><br></pre></td></tr></table></figure><p>我们还需要通过下面的命令来更新配置过的环境变量，然后查看<code>nvm</code>的版本信息如果能够正确打印版本则安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile              更新环境变量</span><br><span class="line"><span class="built_in">command</span> -v nvm                    如果打印nvm则说明安装成功</span><br><span class="line">nvm --version                     打印版本信息 0.33.6</span><br></pre></td></tr></table></figure><div class='titleX'>**NVM的核心命令**</div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nvm --<span class="built_in">help</span>                        查看帮助信息</span><br><span class="line">nvm --version                     查看版本信息</span><br><span class="line">nvm install [-s] &lt;version&gt;        安装指定版本的包</span><br><span class="line">nvm install node                  安装最新的版本</span><br><span class="line">nvm install --lts                 安装最新的稳定版本</span><br><span class="line">nvm uninstall &lt;version&gt;           卸载</span><br><span class="line">nvm uninstall --lts               卸载最新的稳定版本</span><br><span class="line">nvm ls                            查看本地安装的Node版本</span><br><span class="line">nvm ls-remote                     列出可安装的所有远程版本</span><br><span class="line">nvm use 版本号                     切换Node版本</span><br><span class="line">nvm current                       查看当前版本</span><br></pre></td></tr></table></figure><div class='titleX'>**NPX的核心命令**</div><p><code>npx</code>工具想要解决的主要问题是调用项目内部安装的模块。</p><p>一般情况下我们调用项目内部安装的模块，只能在项目脚本和<code>package.json</code>的<code>scripts</code>字段里面配置(通过<code>npm run xxx</code>的方式调用)。如果要通过命令行调用则会比较麻烦，我们可以做个对比：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ npm install  mocha --save-dev             安装开发依赖</span><br><span class="line"></span><br><span class="line"><span class="comment"># [1] 通过npm的方式来执行</span></span><br><span class="line">$ <span class="built_in">cd</span> node_modules/.bin/                     切换到本地项目.bin目录中</span><br><span class="line">$ mocha --version                           执行对应的模块</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2] 通过配置package.json文件的script字段来执行</span></span><br><span class="line"><span class="comment"># 配置项：&quot;mocha&quot;:&quot;./node_modules/.bin/mocha --version&quot;</span></span><br><span class="line">$ npm run mocha </span><br><span class="line"></span><br><span class="line"><span class="comment"># [3] 通过npx的方式来执行</span></span><br><span class="line">$ npx mocha --version                       执行mocha模块 </span><br></pre></td></tr></table></figure><p><code>npx</code> 不需要全局安装依赖包的情况下，直接运行命令来临时安装-使用-写在，整个操作一气呵成而且运行后不会污染全局环境。比如我们初始化一个项目的时候，<code>npx create-react-app my-react-app</code>指令，会将<code>create-react-app</code>下载到一个临时目录，使用以后再删除，每次运行这个命令，都会重新下载依赖包运行后删除。</p><p>如果我们需要检查某个文件的媒体类型(<code>mime</code>类型)，可以通过<code>mime</code>这个包来实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx mime index.js</span><br><span class="line">npx: 1 安装成功，用时 1.994 秒</span><br><span class="line">application/javascript</span><br></pre></td></tr></table></figure><p><code>npx</code> 在使用的时候感觉比较像<code>npm run</code>，但是更加灵活和方便，它的原理就是运行的时候会去<code>node_modules/.bin</code>路径检查<code>npx</code>后的命令是否存在，存在则执行，如果找不到，那么就继续去环境变量<code>$PATH</code>里面查找，存在则执行，如果还是找不到，那么就会自动下载依赖包的最新版本到临时目录，然后再运行命令，运行完之后把该包删除。</p><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;tip&#39;&gt;本文作为作为[Node系列-npm](http://wendingding.com/2018/11/24/Node%E7%B3%BB%E5%88%97-npm/)的补充，介绍NPM系列核心工具(`npm`、`nrm`、`npx`和`nvm`)的基</summary>
      
    
    
    
    
    <category term="Node系列" scheme="https://weibo.com/u/3800117445/tags/Node%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - palindrome+</title>
    <link href="https://weibo.com/u/3800117445/2020/04/30/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9B%9E%E6%96%87+/"/>
    <id>https://weibo.com/u/3800117445/2020/04/30/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9B%9E%E6%96%87+/</id>
    <published>2020-04-29T16:00:09.000Z</published>
    <updated>2021-12-16T09:45:36.487Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题，求让指定字符串构成回文字符串的最小子串。</strong></div><p><strong>说明</strong> 回文字符串的特点是：<code>自左-&gt;右读和自右-&gt;左读内容一致</code>，譬如<code>abcba</code>。<br><strong>举例</strong> 给定字符串<code>abc</code>，让该字符串成为回文字符串可以拼接<code>cba</code>构成<code>abccba</code>成为回文，也可以拼接<code>ba</code>构成<code>abcba</code>成为回文，题目的要求是求最小回文，所以通过代码得到的最小子串应该为<code>ba</code>。</p><div class="titleX" style="background:#239F60;color:white"><strong>解决方案1</strong></div><p><strong>思路</strong> 利用栈的结构来处理回文。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMinCharsToPalindrome</span>(<span class="params">strA</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = [...strA].reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = str.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stack[stack.length - <span class="number">1</span>] === str[i]) &#123;</span><br><span class="line">            stack.pop()</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;推出&#x27;</span>, stack);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.push(str[i]);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;入栈&#x27;</span>, stack);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = stack.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> flag ? strA + res : strA + res.slice(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;ab&quot;</span>, findMinCharsToPalindrome(<span class="string">&quot;ab&quot;</span>));     <span class="comment">/* ab aba */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;abc&quot;</span>, findMinCharsToPalindrome(<span class="string">&quot;abc&quot;</span>));   <span class="comment">/* abc abcba */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;abcc&quot;</span>, findMinCharsToPalindrome(<span class="string">&quot;abcc&quot;</span>)); <span class="comment">/* abcc abccba */</span></span><br></pre></td></tr></table></figure><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题，求让指定字符串构成回文字符串的最小子串。&lt;/strong&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt; 回文字符串的特点是：</summary>
      
    
    
    
    
    <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - palindrome</title>
    <link href="https://weibo.com/u/3800117445/2020/04/29/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9B%9E%E6%96%87/"/>
    <id>https://weibo.com/u/3800117445/2020/04/29/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9B%9E%E6%96%87/</id>
    <published>2020-04-28T16:00:09.000Z</published>
    <updated>2021-12-16T09:45:36.487Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题1：检查给定的字符串是否是回文字符串。</strong></div><p><strong>说明</strong> 回文字符串的特点是：<code>自左-&gt;右读和自右-&gt;左读内容一致</code>，譬如<code>上海自来水来自海上</code>。</p><div class="titleX" style="background:#239F60;color:white"><strong>解决方案1</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 思路 : 使用数组来进行处理*/</span></span><br><span class="line"><span class="comment">/* (1) 先把字符串转换为数组，然后倒序后再处理为字符串 */</span></span><br><span class="line"><span class="comment">/* (2) 比较两个字符串是否全等，全等则表示该字符串是回文 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> target = [...str].reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> target === str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span>  </span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">&quot;aba&quot;</span>));              <span class="comment">/*  true  */</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">&quot;abc&quot;</span>));              <span class="comment">/*  false */</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">&quot;上海自来水来自海上&quot;</span>));  <span class="comment">/*  true  */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="titleX" style="background:#239F60;color:white"><strong>解决方案2</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 思路 : 使用栈数据结构进行处理 */</span></span><br><span class="line"><span class="comment">/* (1) 利用栈结构通过入栈和出栈的操作来完成字符串的翻转 */</span></span><br><span class="line"><span class="comment">/* (2) 比较两个字符串是否全等，全等则表示该字符串是回文 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.top = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.data = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">ele</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data[<span class="built_in">this</span>.top++] = ele;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data[<span class="built_in">this</span>.top - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.top = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.data = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">length</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        stack.push(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> target = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (stack.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        target += stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str === target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">&quot;abcdcba&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&quot;abcaba&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str3 = <span class="string">&quot;上海自来水来自海上&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`&quot;<span class="subst">$&#123;str1&#125;</span>&quot;<span class="subst">$&#123;isPalindrome(str1) ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;不是&quot;</span>&#125;</span>回文字符串。`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`&quot;<span class="subst">$&#123;str2&#125;</span>&quot;<span class="subst">$&#123;isPalindrome(str2) ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;不是&quot;</span>&#125;</span>回文字符串。`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`&quot;<span class="subst">$&#123;str3&#125;</span>&quot;<span class="subst">$&#123;isPalindrome(str3) ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;不是&quot;</span>&#125;</span>回文字符串。`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行结果 */</span></span><br><span class="line"><span class="comment">// wendingding$ node 02-检查回文.js </span></span><br><span class="line"><span class="comment">// &quot;abcdcba&quot;是回文字符串。</span></span><br><span class="line"><span class="comment">// &quot;abcaba&quot;不是回文字符串。</span></span><br><span class="line"><span class="comment">// &quot;上海自来水来自海上&quot;是回文字符串。</span></span><br></pre></td></tr></table></figure><div class="titleX" style="background:#DC534A;color:white"><strong>问题2：请编写函数求字符串中存在的最长回文字符串。</strong></div><p><strong>说明</strong> 譬如给定字符串为<code>1abcba123</code>,那么该该字符串中存在的最长回文字符串应该为<code>1abcba1</code>。</p><div class="titleX" style="background:#239F60;color:white"><strong>解决方案</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longestPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 如果字符串为空或者只有一个字符，那么就直接返回当前字符 */</span></span><br><span class="line">    <span class="keyword">if</span> (str.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chars = [],offset, k;</span><br><span class="line">    <span class="comment">/* 通过循环把所有的字符(可能存在最长回文都添加到chars中) */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        offset = k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (str[i+ offset] &amp;&amp; str[i - offset] &amp;&amp; str[i-offset] === str[i+offset]) &#123;</span><br><span class="line">            offset++;</span><br><span class="line">        &#125;;</span><br><span class="line">        chars.push(str.slice(i - offset + <span class="number">1</span>, i + offset))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;chars.toString()&#125;</span>]`</span>);</span><br><span class="line">        <span class="keyword">while</span> (str[i + <span class="number">1</span> + k] &amp;&amp; str[i - k] &amp;&amp; str[i + <span class="number">1</span> + k] === str[i - k]) &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        chars.push(str.slice(i - k + <span class="number">1</span>, i + k + <span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 对数组中的字符串按照长度进行排序(长-&gt;短) */</span></span><br><span class="line">    <span class="keyword">let</span> result = chars.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b.length - a.length</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`排序后的数组：[<span class="subst">$&#123;result.join(<span class="string">&quot;,&quot;</span>)&#125;</span>]`</span>);</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">&quot;ac121ca123210&quot;</span>));</span><br><span class="line"><span class="comment">/* 打印显示 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">[a]</span></span><br><span class="line"><span class="comment">[a,,c]</span></span><br><span class="line"><span class="comment">[a,,c,,1]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2,,12321]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2,,12321,,2]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2,,12321,,2,,1]</span></span><br><span class="line"><span class="comment">[a,,c,,1,,ac121ca,,1,,c,,a,,1,,2,,12321,,2,,1,,0]</span></span><br><span class="line"><span class="comment">排序后的数组：[ac121ca,12321,a,a,1,c,c,1,2,1,2,1,0,,,,,,,,,,,,,]</span></span><br><span class="line"><span class="comment">ac121ca */</span></span><br></pre></td></tr></table></figure><div class='tip'>在上面的代码中，可能会存在拥有多个最长回文子串(譬如传入的字符串是`abccba1221a`)或者没有回文子串(`譬如传入的字符串是 abc`)的情况，因此还需要调整下代码。</div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longestPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chars = [];</span><br><span class="line">    <span class="keyword">let</span> offset, k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        offset = k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (str[i + offset] &amp;&amp; str[i - offset] &amp;&amp; str[i-offset] === str[i+offset]) &#123;</span><br><span class="line">            offset++;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        chars.push(str.slice(i - offset + <span class="number">1</span>, i + offset));</span><br><span class="line">        <span class="keyword">while</span> (str[i + <span class="number">1</span> + k] &amp;&amp; str[i - k] &amp;&amp; str[i + <span class="number">1</span> + k] === str[i - k]) &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        chars.push(str.slice(i - k + <span class="number">1</span>, i + k + <span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = chars.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b.length - a.length</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`排序后的数组：[<span class="subst">$&#123;result.join(<span class="string">&quot;,&quot;</span>)&#125;</span>]`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注意：特殊情况的处理 */</span></span><br><span class="line">    <span class="keyword">let</span> maxLength = result[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">let</span> allPalindromes = [];</span><br><span class="line">    result.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxLength == item.length) allPalindromes.push(item);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxLength == <span class="number">1</span> ? <span class="string">`抱歉，在该字符串中没有找到回文子串`</span> : </span><br><span class="line">        <span class="string">`列出字符串中的最长回文子串为：<span class="subst">$&#123;allPalindromes.join(<span class="string">&quot; 和 &quot;</span>)&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">&quot;ac121ca123210&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">&quot;abccba1221a&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印结果 */</span></span><br><span class="line"><span class="comment">// wendingding$ node 02-min.js </span></span><br><span class="line"><span class="comment">// 排序后的数组：[a,b,c,,,]</span></span><br><span class="line"><span class="comment">// 抱歉，在该字符串中没有找到回文子串</span></span><br><span class="line"><span class="comment">// 排序后的数组：[ac121ca,12321,a,a,1,c,c,1,2,1,2,1,0,,,,,,,,,,,,,]</span></span><br><span class="line"><span class="comment">// 列出字符串中的最长回文子串为：ac121ca</span></span><br><span class="line"><span class="comment">// 排序后的数组：[abccba,a1221a,a,a,c,b,b,1,2,c,2,1,a,,,,,,,,,]</span></span><br><span class="line"><span class="comment">// 列出字符串中的最长回文子串为：abccba 和 a1221a</span></span><br></pre></td></tr></table></figure><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题1：检查给定的字符串是否是回文字符串。&lt;/strong&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt; 回文字符串的特点是：&lt;c</summary>
      
    
    
    
    
    <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - ( ) matching</title>
    <link href="https://weibo.com/u/3800117445/2020/04/28/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E6%A0%A1%E9%AA%8C%E6%8B%AC%E5%8F%B7%E6%98%AF%E5%90%A6%E5%8C%B9%E9%85%8D/"/>
    <id>https://weibo.com/u/3800117445/2020/04/28/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E6%A0%A1%E9%AA%8C%E6%8B%AC%E5%8F%B7%E6%98%AF%E5%90%A6%E5%8C%B9%E9%85%8D/</id>
    <published>2020-04-27T16:00:09.000Z</published>
    <updated>2021-12-16T09:45:36.487Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题：给出下面的字符串，请编写函数来校验括号是否匹配，要求函数尽可能通用。</strong></div>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testString = <span class="string">&quot;(()()()()&quot;</span>;</span><br></pre></td></tr></table></figure><div class="titleX" style="background:#239F60;color:white"><strong>方案</strong></div><p><strong><code>说明</code></strong> 类似问题使用栈数据结构的方式来进行匹配会比较合理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/* 1.提供简单的栈结构 Class */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = [];</span><br><span class="line">        <span class="built_in">this</span>.top = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">ele</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data[<span class="built_in">this</span>.top++] = ele;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.top--;</span><br><span class="line">        <span class="built_in">this</span>.data.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data[<span class="built_in">this</span>.top - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.top = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.data = [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.括号字符串匹配校验函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matching</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">   stack.clear();                                <span class="comment">/* 清栈操作 */</span></span><br><span class="line">   str = str.trim();                             <span class="comment">/* 字符串清理 */</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;        <span class="comment">/* 遍历字符串 */</span></span><br><span class="line">       <span class="keyword">if</span> (str[i] == <span class="string">&quot; &quot;</span>) <span class="keyword">continue</span>;              <span class="comment">/* 如果当前字符是空格则跳过 */</span></span><br><span class="line">       <span class="keyword">if</span> (stack.peek() == <span class="string">&quot;(&quot;</span> &amp;&amp; str[i] == <span class="string">&quot;)&quot;</span>) &#123;</span><br><span class="line">           stack.pop();                          <span class="comment">/* 若匹配则执行出栈操作 */</span></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           stack.push(str[i]);                   <span class="comment">/* 不匹配则执行入栈操作 */</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(i, stack.data)                <span class="comment">/* 打印检查栈内数据结构 */</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> stack.top == <span class="number">0</span>;                        <span class="comment">/* 返回结果 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.测试数据 */</span></span><br><span class="line"><span class="keyword">let</span> res1 = matching(<span class="string">&quot;()&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;_______&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> res2 = matching(<span class="string">&quot;(&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;_______&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> res3 = matching(<span class="string">&quot;()(&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;_______&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> res4 = matching(<span class="string">&quot;( (())  ()()  )  &quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res1, res2, res3, res4);</span><br></pre></td></tr></table></figure><p>打印参考：<br><img src='../../../../src/khpp.png'></p><p>在上面代码中<code>matching</code>函数中通过普通 for 循环遍历字符串，尝试使用<code>forEach</code>遍历调整代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matching</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();            <span class="comment">/* 实例化 */</span></span><br><span class="line">    str = str.trim();                   <span class="comment">/* 清理字符串前后可能存在的空格 */</span></span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&quot;)&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">/* 如果开始字符为)那么直接结束 */</span></span><br><span class="line"></span><br><span class="line">    [...str].forEach(<span class="function">(<span class="params">s, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="string">&quot; &quot;</span>) <span class="keyword">return</span>;           <span class="comment">/* 如果当前字符是空格，那么忽略处理 */</span></span><br><span class="line">        <span class="comment">/* 如果当前字符和栈顶字符匹配，那么就出栈，否则执行入栈操作 */</span></span><br><span class="line">        (stack.peek() == <span class="string">&quot;(&quot;</span> &amp;&amp; s == <span class="string">&quot;)&quot;</span>) ? stack.pop(): stack.push(s);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/* 如果栈内没有数据(都消除了)，那么表示()总是合法成对匹配 */</span></span><br><span class="line">    <span class="keyword">return</span> stack.top == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面代码中我自己提供了一个 Stack 类来实例化 stack 栈对象，在面试中这样写可能代码显得有点多，下面我使用字符串来模拟栈结构调整代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 匹配函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matching</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">0</span>;                                  <span class="comment">/* 1.使用字符串来模拟栈结构 */</span></span><br><span class="line">    <span class="keyword">let</span> stack = <span class="string">&quot;&quot;</span>;                               <span class="comment">/* 2.初始化一个空栈 */</span>    </span><br><span class="line">    str = str.trim();                             <span class="comment">/* 3.对需要检查校验的字符串执行清理操作 */</span></span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&quot;)&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;              <span class="comment">/* 4.如果第一个字符不正确那么直接结束 */</span></span><br><span class="line">    </span><br><span class="line">    [...str].forEach(<span class="function">(<span class="params">s, i</span>) =&gt;</span> &#123;                  <span class="comment">/* 5.遍历字符串 */</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="string">&quot; &quot;</span>) <span class="keyword">return</span>;                     <span class="comment">/* 6.若当前字符为空字符串，那么就忽略处理 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (stack[len - <span class="number">1</span>] === <span class="string">&quot;(&quot;</span> &amp;&amp; s == <span class="string">&quot;)&quot;</span>) &#123; <span class="comment">/* 7.检查是否匹配，若匹配那么就执行出栈操作*/</span></span><br><span class="line">            len--;</span><br><span class="line">            stack = stack.slice(<span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                                  <span class="comment">/* 8.如果不匹配那么就执行入栈操作 */</span>  </span><br><span class="line">            len++;</span><br><span class="line">            stack += s</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> len === <span class="number">0</span>;                              <span class="comment">/* 9.根据栈的长度来判断是否匹配 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题：给出下面的字符串，请编写函数来校验括号是否匹配，要求函数尽可能通用。&lt;/strong&gt;&lt;/div&gt;
  
  &lt;figure class=&quot;</summary>
      
    
    
    
    
    <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - add(1)(2)(3)(4)</title>
    <link href="https://weibo.com/u/3800117445/2020/04/27/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E5%A5%87%E6%80%AA%E5%87%BD%E6%95%B0/"/>
    <id>https://weibo.com/u/3800117445/2020/04/27/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E5%A5%87%E6%80%AA%E5%87%BD%E6%95%B0/</id>
    <published>2020-04-26T16:00:09.000Z</published>
    <updated>2021-12-16T09:45:36.487Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题：编写函数要求函数实现 add(1)(2)(3)(4)(5) 返回所有参数的累加和15。</strong></div><p><strong>说明</strong> 编写的<code>add</code>函数需满足通用性要求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数调用 add(<span class="number">1</span>)(<span class="number">2</span>)          返回值 <span class="number">3</span></span><br><span class="line">函数调用 add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)       返回值 <span class="number">6</span></span><br><span class="line">函数调用 add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)    返回值 <span class="number">10</span></span><br><span class="line">...以此类推</span><br></pre></td></tr></table></figure><div class="titleX" style="background:#239F60;color:white"><strong>方案</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">m</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="function">(<span class="params">n</span>) =&gt;</span> add(m + n);</span><br><span class="line">    fn.toString = <span class="function">() =&gt;</span> m;</span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="keyword">let</span> res1 = add(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> res2 = add(<span class="number">1</span>)(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> res3 = add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> res4 = add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">let</span> res5 = add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res1, res2, res3, res4, res5); <span class="comment">/* ƒ 1 ƒ 3 ƒ 6 ƒ 10 ƒ 15 ƒ 3 */</span></span><br></pre></td></tr></table></figure><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题：编写函数要求函数实现 add(1)(2)(3)(4)(5) 返回所有参数的累加和15。&lt;/strong&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong</summary>
      
    
    
    
    
    <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>奇怪问题 - Max out the Array</title>
    <link href="https://weibo.com/u/3800117445/2020/04/26/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E6%B1%82%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://weibo.com/u/3800117445/2020/04/26/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98-%E6%B1%82%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2020-04-25T16:00:09.000Z</published>
    <updated>2021-12-16T09:45:36.487Z</updated>
    
    <content type="html"><![CDATA[<div class="titleX" style="background:#DC534A;color:white"><strong>问题：给出下面的数据，请编写函数求数组的最大值。</strong></div>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">            [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">            [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>],</span><br><span class="line">            [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, [<span class="number">39</span>, <span class="number">43</span>, [<span class="number">99</span>, <span class="number">81</span>]]],</span><br><span class="line">            <span class="number">12</span></span><br><span class="line">    ];</span><br></pre></td></tr></table></figure><div class="titleX" style="background:#239F60;color:white"><strong>方案</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 整理数组元素 */</span></span><br><span class="line">   arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">           <span class="comment">/* 递归调用 */</span></span><br><span class="line">           arr[index] = findMax(item);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 数组排序 */</span></span><br><span class="line">   arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> b - a;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 总是取最大值 */</span></span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>优化下代码，把利用 `sort` 排序求最大值的部分调整为 `Math.max` 方法。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">            arr[index] = findMax(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(...arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;titleX&quot; style=&quot;background:#DC534A;color:white&quot;&gt;&lt;strong&gt;问题：给出下面的数据，请编写函数求数组的最大值。&lt;/strong&gt;&lt;/div&gt;

  
  &lt;figure class=&quot;highlight ja</summary>
      
    
    
    
    
    <category term="奇怪问题" scheme="https://weibo.com/u/3800117445/tags/%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Gossip -  tagged template</title>
    <link href="https://weibo.com/u/3800117445/2020/02/04/Gossip%20-%20tagged%20template/"/>
    <id>https://weibo.com/u/3800117445/2020/02/04/Gossip%20-%20tagged%20template/</id>
    <published>2020-02-03T16:00:08.000Z</published>
    <updated>2021-12-16T09:45:36.465Z</updated>
    
    <content type="html"><![CDATA[<div class='tip'>本文介绍模板字符串的某种特殊用法，允许我们在函数名后跟一个模板字符串，然后可以像正常函数调用一样来把模板字符串中的各个部分以参数的方式传递给该函数。</div><p><a href="">标签模板-tagged template</a> 并非真正的字符串模板，而是一种特殊形式的函数调用。</p><p>在标签模板中的<code>标签(tag)</code>指的是函数，而跟在其后的<code>模板</code>表示的则是函数调用时传递的实际参数。假如我们存在一个函数 <code>function tag()&#123;console.log(arguments)&#125;</code>，那么当在<code>tag</code>后跟上模板字符串的时候就会变成函数调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Yong&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line">tag <span class="string">`My name is <span class="subst">$&#123;name&#125;</span>. I&#x27;m <span class="subst">$&#123;age&#125;</span> years old`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">[Arguments] &#123;</span></span><br><span class="line"><span class="comment">  &#x27;0&#x27;: [ &#x27;My name is &#x27;, &#x27;. I\&#x27;m &#x27;, &#x27; years old&#x27; ],</span></span><br><span class="line"><span class="comment">  &#x27;1&#x27;: &#x27;Yong&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;2&#x27;: 18 &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>观察上面的代码和对应的执行结果，在 <code>tag 函数</code> 的调用过程中， 模板字符串部分<code>My name is $&#123;name&#125;. I&#39;m $&#123;age&#125; years old</code> 被拆分成了不同的部分以参数形式传递到函数内容，具体在拆分的时候，所有非变量型(<code>变量型指的是$&#123;name&#125;这样的结构</code>)的部分将被作为第一个参数传入，而所有变量型的数据则会依次跟在后面以第二、第三、第四… 参数的形式传入。</p><p>为了更方便的区分和处理这两部分参数，我们尝试通过剩余参数的方式来调整<code>tag 函数</code>的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">stringArr, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;第一部分：&quot;</span>, stringArr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;第二部分：&quot;</span>, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Yong&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line">tag <span class="string">`My name is <span class="subst">$&#123;name&#125;</span>. I&#x27;m <span class="subst">$&#123;age&#125;</span> years old`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">第一部分： [ &#x27;My name is &#x27;, &#x27;. I\&#x27;m &#x27;, &#x27; years old&#x27; ]</span></span><br><span class="line"><span class="comment">第二部分： [ &#x27;Yong&#x27;, 18 ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>字符串<code>双反引号</code>的写法( 我们通常称为模板字符串 )是ES6为我们提供的新特性，作为增强版本的字符串，这个特性至少为我们带来了两点便利。</p><p>1、方便的处理字符串中的换行。<br>2、方便的在字符串中以${ }的形式来插入变量，以替代原本的 + 来完成拼接。</p><p><code>备注</code>：在模板字符串的 ${} 中可以放任意的JavaScript表达式，譬如变量、普通字符串、简单计算、引用对象属性甚至是函数调用，具体可以参考下面的演示代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1.插入变量 */</span></span><br><span class="line"><span class="keyword">let</span> address = <span class="string">&quot;广州&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">`地址：<span class="subst">$&#123; address &#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.插入数字 */</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`编号：<span class="subst">$&#123; <span class="number">10086</span> &#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.插入字符串 */</span></span><br><span class="line"><span class="keyword">let</span> str3 = <span class="string">`描述：<span class="subst">$&#123; <span class="string">&#x27;description&#x27;</span> &#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4.简单计算 */</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>,</span><br><span class="line">    y = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> str4 = <span class="string">`计算：<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y&#125;</span> * 2 == <span class="subst">$&#123;x + y * <span class="number">2</span>&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 5.函数调用 */</span></span><br><span class="line"><span class="keyword">let</span> callFn = <span class="function">() =&gt;</span> <span class="string">&quot;callFn be Call&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str5 = <span class="string">`函数调用：<span class="subst">$&#123;callFn() &#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 6.测试三元运算符 */</span></span><br><span class="line"><span class="keyword">let</span> str6 = <span class="string">`三元运算符：<span class="subst">$&#123; <span class="number">5</span>&gt;<span class="number">1</span> ?<span class="string">&#x27;结果大于1&#x27;</span>:<span class="string">&#x27;结果不大于1&#x27;</span>&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br><span class="line"><span class="built_in">console</span>.log(str3);</span><br><span class="line"><span class="built_in">console</span>.log(str4);</span><br><span class="line"><span class="built_in">console</span>.log(str5);</span><br><span class="line"><span class="built_in">console</span>.log(str6);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">地址：广州</span></span><br><span class="line"><span class="comment">编号：10086</span></span><br><span class="line"><span class="comment">描述：description</span></span><br><span class="line"><span class="comment">计算：1 + 5 * 2 == 11</span></span><br><span class="line"><span class="comment">函数调用：callFn be Call</span></span><br><span class="line"><span class="comment">三元运算符：结果大于1 */</span></span><br></pre></td></tr></table></figure><p>理所应当 &amp;&amp; 自然而然，我们不假思索就用上了模板字符串这样牛逼的特性，不过我建议再多一层对反引号字符串的处理过程的思考，下面的代码中封装了一个函数来模拟和还原处理的过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">strArr, ...args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印参数 */</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;strArr = &#x27;</span>, strArr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;args   = &#x27;</span>, args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    args.forEach(<span class="function">(<span class="params">s, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`current - strArr[<span class="subst">$&#123;idx&#125;</span>]`</span>, strArr[idx]);</span><br><span class="line">        output += strArr[idx] + s;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 因为 args &#123;变量参数&#125;的个数总是会比strArr的数量多1，因此还需拼接末尾 */</span></span><br><span class="line">    output += strArr[strArr.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试代码*/</span></span><br><span class="line"><span class="built_in">console</span>.log(parse <span class="string">`a = <span class="subst">$&#123;a&#125;</span> , b = <span class="subst">$&#123;b&#125;</span> , a + b = <span class="subst">$&#123;a + b&#125;</span> .`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出  </span></span><br><span class="line"><span class="comment">strArr =  [ &#x27;a = &#x27;, &#x27; , b = &#x27;, &#x27; , a + b = &#x27;, &#x27; .&#x27; ]</span></span><br><span class="line"><span class="comment">args   =  [ 1, 2, 3 ]</span></span><br><span class="line"><span class="comment">current - strArr[0] a =</span></span><br><span class="line"><span class="comment">current - strArr[1]  , b =</span></span><br><span class="line"><span class="comment">current - strArr[2]  , a + b =</span></span><br><span class="line"><span class="comment">a = 1 , b = 2 , a + b = 3 .  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><img src='../../../../src/tag_t.png'><p>在上面的代码中，我们通过<code>标签模板</code>的调用结构，利用<code>parse 函数</code>完成了模板字符串的”还原”工作。</p><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;tip&#39;&gt;本文介绍模板字符串的某种特殊用法，允许我们在函数名后跟一个模板字符串，然后可以像正常函数调用一样来把模板字符串中的各个部分以参数的方式传递给该函数。&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;标签模板-tagged template&lt;/a&gt; 并非</summary>
      
    
    
    
    
    <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - template compile</title>
    <link href="https://weibo.com/u/3800117445/2020/02/03/Gossip%20-%20template%20compile/"/>
    <id>https://weibo.com/u/3800117445/2020/02/03/Gossip%20-%20template%20compile/</id>
    <published>2020-02-02T16:00:08.000Z</published>
    <updated>2021-12-16T09:45:36.465Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近有个朋友问<code>&lt;%=...%&gt; </code>和 <code>&#123;&#123; Mustache &#125;&#125;</code> 插值语法的一些问题，突然想起以前使用<code>&lt;%=...%&gt;</code>语法进行模板编译的日子，似乎已经很久远了，刚好有点时间所以写篇文章重新温故下模板编译的处理逻辑。</p></blockquote><p><strong>关键</strong> <strong><code>正则表达式</code><strong>、</strong><code>eval函数</code><strong>和</strong><code>字符串拼接</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;% <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; data.list.length;i++) &#123;%&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&lt;%= data.list[i] %&gt;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>给定上面的模板字符串，我们希望能够提供一个模板编译函数，传递数据<code>(data:[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])</code>给该函数以编译出下面的文本标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>思路</strong> 对于上面的字符串模板，如果要编译得到目标字符串，那么关键点在于for循环的处理，这里最简单的办法就是直接通过<code>eval函数</code>来执行 <code>for循环</code>部分的代码，而<code>&lt;% 和 %&gt;</code>等部分则需要通过正则来进行替换。假设，我们在这里提供一个 <code>echo函数</code> 用于做字符串的拼接，那么可以考虑先把模板字符串处理为下面的样式，再行处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo(<span class="string">&#x27;&lt;ul&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; data.list.length;i++) &#123;</span><br><span class="line">  echo(<span class="string">&#x27;&lt;li&gt;&#x27;</span>);</span><br><span class="line">  echo(data.list[i]);</span><br><span class="line">  echo(<span class="string">&#x27;&lt;/li&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">echo(<span class="string">&#x27;&lt;/ul&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>具体实现</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 1.模板字符串 */</span></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">  &lt;% for(var i = 0; i&lt; data.list.length;i++) &#123;%&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;%= data.list[i] %&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;% &#125; %&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.封装编译函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.1 编写正则规则 */</span></span><br><span class="line">    <span class="comment">/* 匹配&lt;% %&gt;部分  */</span></span><br><span class="line">    <span class="keyword">let</span> expr = <span class="regexp">/&lt;%([\s\S]+?)%&gt;/g</span>;</span><br><span class="line">    <span class="comment">/* 匹配 &lt;%= data.list[i] %&gt; 部分*/</span></span><br><span class="line">    <span class="keyword">let</span> evalExpr = <span class="regexp">/&lt;%=(.+?)%&gt;/g</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.2 字符串拼接和正则匹配：$1表示匹配到的原文内容 */</span></span><br><span class="line">    template = template</span><br><span class="line">        .replace(evalExpr, <span class="string">&#x27;`); \n echo($1); \n echo(`&#x27;</span>)</span><br><span class="line">        .replace(expr, <span class="string">&#x27;`); \n $1 \n echo(`&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.3 拼接最外层的 echo 函数 */</span></span><br><span class="line">    template = <span class="string">&#x27;echo(`&#x27;</span> + template + <span class="string">&#x27;`)&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.4 组装解析函数 */</span></span><br><span class="line">    <span class="keyword">let</span> script = <span class="string">`(function parse(data)&#123;</span></span><br><span class="line"><span class="string">      let output = &quot;&quot;;</span></span><br><span class="line"><span class="string">      function echo(html)&#123;</span></span><br><span class="line"><span class="string">        output += html.trimEnd();  </span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;template&#125;</span></span></span><br><span class="line"><span class="string">      return output;</span></span><br><span class="line"><span class="string">    &#125;)`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;script&#x27;</span>, script);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> script;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.生成解析函数 */</span></span><br><span class="line"><span class="keyword">let</span> parse = <span class="built_in">eval</span>(compile(template));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4.注入数据 */</span></span><br><span class="line"><span class="keyword">let</span> html = parse(&#123; <span class="attr">list</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出内容： */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">script (function parse(data)&#123;</span></span><br><span class="line"><span class="comment">      let output = &quot;&quot;;</span></span><br><span class="line"><span class="comment">      function echo(html)&#123;</span></span><br><span class="line"><span class="comment">        output += html.trimEnd();  </span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      echo(`</span></span><br><span class="line"><span class="comment">&lt;ul&gt;</span></span><br><span class="line"><span class="comment">  `); </span></span><br><span class="line"><span class="comment">  for(var i = 0; i&lt; data.list.length;i++) &#123; </span></span><br><span class="line"><span class="comment"> echo(`</span></span><br><span class="line"><span class="comment">    &lt;li&gt;`); </span></span><br><span class="line"><span class="comment"> echo( data.list[i] ); </span></span><br><span class="line"><span class="comment"> echo(`&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    `); </span></span><br><span class="line"><span class="comment">  &#125;  </span></span><br><span class="line"><span class="comment"> echo(`</span></span><br><span class="line"><span class="comment">&lt;/ul&gt;</span></span><br><span class="line"><span class="comment">`)</span></span><br><span class="line"><span class="comment">      return output;</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">**********************************</span></span><br><span class="line"><span class="comment">&lt;ul&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;a&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;b&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;c&lt;/li&gt;</span></span><br><span class="line"><span class="comment">&lt;/ul&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近有个朋友问&lt;code&gt;&amp;lt;%=...%&amp;gt; &lt;/code&gt;和 &lt;code&gt;&amp;#123;&amp;#123; Mustache &amp;#125;&amp;#125;&lt;/code&gt; 插值语法的一些问题，突然想起以前使用&lt;code&gt;&amp;lt;%=...%&amp;gt;&lt;</summary>
      
    
    
    
    
    <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - Iterator</title>
    <link href="https://weibo.com/u/3800117445/2020/02/01/Gossip%20-%20Iterator/"/>
    <id>https://weibo.com/u/3800117445/2020/02/01/Gossip%20-%20Iterator/</id>
    <published>2020-01-31T16:00:08.000Z</published>
    <updated>2021-12-16T09:45:36.462Z</updated>
    
    <content type="html"><![CDATA[<div class='tip'>本文简单说明[ 迭代器接口 Iterator]() 接口的基本使用，涉及 Array 、Set 、Map 和 String 以及伪数组等数据结构，以及 `for...of`循环的用法等。</div><div class="titleX"><strong>Iterator - 基本使用</strong></div><p><a href=""> Iterator </a>是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据结构只要部署实现了 <a href=""> Iterator </a> 接口，就可以完成遍历操作。</p><p><a href=""> Iterator </a> 的优点在于能够为不同的数据结构提供了统一的接口；能够以特定的排序来遍历数据结构；提供创造了<code>for...of循环</code>。JavaScript中默认实现迭代器接口(<a href=""> Iterator </a>)的数据结构有类数组结构(<code>NodeList、arguments、String</code>等) 和 <code>Set 、Map、Array</code>等 ，实现 Iterator 接口的数据结构均支持使用 <code>for...of</code> 循环来执行遍历操作。</p><img src='../../../../src/iterator_01.png'><p>下面通过代码简单展示<code>Set 、Map、Array</code>三种数据结构中实现的原生迭代器接口(<a href=""> Iterator </a>)和<code>for...of遍历</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1.数组 Array */</span></span><br><span class="line"><span class="comment">/* 2.集合 Set */</span></span><br><span class="line"><span class="comment">/* 3.映射 Map */</span></span><br><span class="line"><span class="comment">/* 4.其它结构 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arr&quot;</span>, arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="string">&quot;测试&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;set&quot;</span>, set);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">map.set(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">map.set(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;map&quot;</span>, map);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ele <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;______________&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ele <span class="keyword">of</span> set) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;______________&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,val] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;______________&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">arr [ 100, 200, 300 ]</span></span><br><span class="line"><span class="comment">set Set &#123; 10, 20, 30, &#x27;测试&#x27; &#125;</span></span><br><span class="line"><span class="comment">map Map &#123; &#x27;a&#x27; =&gt; &#x27;A&#x27;, &#x27;b&#x27; =&gt; &#x27;B&#x27;, &#x27;c&#x27; =&gt; &#x27;C&#x27; &#125;</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">200</span></span><br><span class="line"><span class="comment">300</span></span><br><span class="line"><span class="comment">______________</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">测试</span></span><br><span class="line"><span class="comment">______________</span></span><br><span class="line"><span class="comment">a A</span></span><br><span class="line"><span class="comment">b B</span></span><br><span class="line"><span class="comment">c C</span></span><br><span class="line"><span class="comment">______________ */</span></span><br></pre></td></tr></table></figure><p>通过查看<code>console.log(Array.property,Set.property,Map.property);</code>打印结果，你会发现在数组、集合和映射它们的内部，都在其构造函数的原型对象上无一例外都实现了<code>Symbol(Symbol.iterator): ƒ entries()函数</code>，调用该函数我们能够得到一个<code>iterator 型对象</code>，当我们使用<code>for...of</code>循环结构来遍历它们的时候，在内部会利用该对象来完成遍历操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* arr.__proto__ ===  Array.prototype[Symbol.iterator] */</span></span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator); <span class="comment">/* Object [Array Iterator] &#123;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;_________bgn_________&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> o = iterator.next();</span><br><span class="line"><span class="keyword">while</span> (!o.done) &#123;</span><br><span class="line">    o = iterator.next()</span><br><span class="line">    <span class="built_in">console</span>.log(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;_________end_________&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Object [Array Iterator] &#123;&#125;</span></span><br><span class="line"><span class="comment">_________bgn_________</span></span><br><span class="line"><span class="comment">&#123; value: 200, done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: 300, done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">_________end_________</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>通过<code>Array.prototype[Symbol.iterator]()</code>可以得到一个<code>iterator 型对象</code>，调用该对象的<code>next方法</code>后能得到个拥有两个键值对的对象，其中<code>value</code>表示的是当前的值，而 <code>done</code> 可以理解为是循环是否结束。在上面的代码中，我通过一个 while 循环来模拟了<code>for..of</code>循环过程。此外，也可以简单对比下这些结构中的<code>entries()、keys() 和 values()</code>等函数的用法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = arr.entries();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;_________bgn_________&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> o = iterator.next();</span><br><span class="line"><span class="keyword">while</span> (!o.done) &#123;</span><br><span class="line">    o = iterator.next()</span><br><span class="line">    <span class="built_in">console</span>.log(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;_________end_________&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr.keys())</span><br><span class="line"><span class="built_in">console</span>.log(arr.values())</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  _________bgn_________</span></span><br><span class="line"><span class="comment">  &#123; value: [ 1, 200 ], done: false &#125;</span></span><br><span class="line"><span class="comment">  &#123; value: [ 2, 300 ], done: false &#125;</span></span><br><span class="line"><span class="comment">  &#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">  _________end_________</span></span><br><span class="line"><span class="comment">  Object [Array Iterator] &#123;&#125;</span></span><br><span class="line"><span class="comment">  Object [Array Iterator] &#123;&#125; */</span></span><br></pre></td></tr></table></figure><p>在 ES6中的数组、Set和 Map 中都部署了<code>entries() 、keys()、values()</code> 三个方法，它们调用后都返回 <code>iterator</code> 迭代器对象，其中<code>entries()</code>返回的迭代器对象用于遍历<code>[key,value]</code>组成的数组，而<code>keys()</code>返回的迭代器对象用于遍历所有的键名，<code>values()</code>返回的迭代器对象用于遍历所有的键值。除了上面列出的<code>Array、Set和 Map</code>结构支持<code>for..of</code>外，下面在给出类数组结构(伪数组)的几种情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1. arguments */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;arguments&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> <span class="built_in">arguments</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;iterator = &#x27;</span>, iterator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="number">10</span>, <span class="number">203</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出： */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">arguments</span></span><br><span class="line"><span class="comment">iterator =  a</span></span><br><span class="line"><span class="comment">iterator =  b</span></span><br><span class="line"><span class="comment">iterator =  c</span></span><br><span class="line"><span class="comment">iterator =  10</span></span><br><span class="line"><span class="comment">iterator =  203 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.NodeList */</span></span><br><span class="line"><span class="keyword">let</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">oDiv.innerHTML = <span class="string">&quot;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(oDiv.children);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> oDiv.children) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;element = &#x27;</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">HTMLCollection(4) [span, span, span, span]</span></span><br><span class="line"><span class="comment">VM76:5 element =  &lt;span&gt;​A​&lt;/span&gt;</span></span><br><span class="line"><span class="comment">VM76:5 element =  &lt;span&gt;​B​&lt;/span&gt;</span></span><br><span class="line"><span class="comment">VM76:5 element =  &lt;span&gt;​c​&lt;/span&gt;</span></span><br><span class="line"><span class="comment">VM76:5 element =  &lt;span&gt;​D​&lt;/span&gt; */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.字符串(String) */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> str) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;s = &quot;</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> str[<span class="built_in">Symbol</span>.iterator]()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;s = &quot;</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">s =  H</span></span><br><span class="line"><span class="comment">s =  e</span></span><br><span class="line"><span class="comment">s =  l</span></span><br><span class="line"><span class="comment">s =  l</span></span><br><span class="line"><span class="comment">s =  o */</span></span><br></pre></td></tr></table></figure><p>在上面列出的几种伪数组结构中，他们内部都实现了<code>iterator</code>接口，自己写的伪数组或者是对象实现了<code>iterator</code>接口支持<code>for...of</code>循环吗？ 答案是否定的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1、自己写的伪数组结构 */</span></span><br><span class="line"><span class="keyword">let</span> likeArray = &#123; <span class="number">0</span>: <span class="string">&quot;a&quot;</span>, <span class="number">1</span>: <span class="string">&quot;b&quot;</span>, <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> likeArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;iterator = &#x27;</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 报错：TypeError: likeArray is not iterable */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.对象结构 */</span></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">name</span>: <span class="string">&quot;Yong&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;iterator = &#x27;</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 报错：TypeError: o is not iterable */</span></span><br></pre></td></tr></table></figure><p>如果自己写的伪数组也要能够支持<code>for...of</code> 循环，那么可以有下面几种尝试的办法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> likeArray = &#123; <span class="number">0</span>: <span class="string">&quot;a&quot;</span>, <span class="number">1</span>: <span class="string">&quot;b&quot;</span>, <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第一种方式：通过对象解构方式来先转换为数组 */</span></span><br><span class="line"><span class="comment">/* 结果：失败 (分析原因：扩展运算符[...]内部默认会自动调用 iterator 接口) */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span>[...likeArray]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;iterator = &#x27;</span>, likeArray);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第二种方式：利用 Array.from尝试转换为数组 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> <span class="built_in">Array</span>.from(likeArray)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;iterator = &#x27;</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结果输出：</span></span><br><span class="line"><span class="comment">iterator =  a</span></span><br><span class="line"><span class="comment">iterator =  b</span></span><br><span class="line"><span class="comment">iterator =  c */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第三种方式：在当前伪数组的原型上面部署&quot;原生&quot;的 iterator 迭代器接口 */</span></span><br><span class="line"><span class="comment">/* ①  */</span></span><br><span class="line"><span class="comment">// likeArray.__proto__[Symbol.iterator] = Array.prototype[Symbol.iterator];</span></span><br><span class="line"><span class="comment">/* ② */</span></span><br><span class="line"><span class="comment">// Object.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];</span></span><br><span class="line"><span class="comment">/* ③ */</span></span><br><span class="line"><span class="comment">// likeArray[Symbol.iterator] = Array.prototype[Symbol.iterator];</span></span><br><span class="line"><span class="comment">/* ④ */</span></span><br><span class="line">likeArray[<span class="built_in">Symbol</span>.iterator] = [][<span class="built_in">Symbol</span>.iterator].bind(likeArray);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> likeArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;iterator = &#x27;</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结果输出：</span></span><br><span class="line"><span class="comment">iterator =  a</span></span><br><span class="line"><span class="comment">iterator =  b</span></span><br><span class="line"><span class="comment">iterator =  c */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="tip">注意的是上面直接利用数组的[Symbol.iterator]来为伪数组部署迭代器接口的方式并不适用于普通的对象，如果用在普通对象的身上那么则毫无效果。</div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 2.对象结构 */</span></span><br><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">name</span>: <span class="string">&quot;Yong&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.1 对象无法直接通过 for...of进行遍历 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;iterator = &#x27;</span>, likeArray);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 报错：TypeError: o is not iterable */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.2 尝试利用数组的Symbol.iterator接口部署 */</span></span><br><span class="line">o.__proto__[<span class="built_in">Symbol</span>.iterator] = [][<span class="built_in">Symbol</span>.iterator];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;iterator = &#x27;</span>, likeArray);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果：不会进入循环，没有任何输出 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.3 尝试遍历对象的 keys 间接遍历对象 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(o)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`key:<span class="subst">$&#123;key&#125;</span> value:<span class="subst">$&#123;o[key]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">key:name value:Yong</span></span><br><span class="line"><span class="comment">key:age  value:18 */</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>这里简单思考和总结下，对象中没有实现<code>Iterator</code>迭代器的原因</strong><br>○ 对象已经拥有了 for…in循环 (该循环专为对象迭代设计)。<br>○ 对象在遍历的时候，属性( 键值对 )遍历的先后顺序是不确定的，而<code>Iterator</code>迭代器是线性的。<br>○ ES6提供了 Map ，可以在某种程度上实现替代操作。</p></blockquote><div class="titleX"><strong>Iterator - 内部结构 </strong></div><p>在数组等数据结构中，当我们调用 <code>entries() </code>或者是<code>Symbol.iterator()</code>的时候将得到一个<code>iterator</code>迭代器对象，在该对象中<code>next</code>方法每调用一次就会返回一个包含本次迭代 value 值以及标记是否完成迭代的 done 属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123; value: &#x27;a&#x27;, done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: &#x27;b&#x27;, done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: undefined, done: true &#125; */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们可以尝试来封装一个函数<code>makeIterator</code>，模拟 <code>next</code>函数的工作过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> makeIterator = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="function">() =&gt;</span> idx &lt; arr.length ? </span><br><span class="line">        &#123; <span class="attr">value</span>: arr[idx], <span class="attr">done</span>: <span class="literal">false</span> &#125; : &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = makeIterator([<span class="number">100</span>, <span class="number">200</span>, <span class="string">&quot;Yong&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123; value: 100, done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: 200, done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: &#x27;Yong&#x27;, done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: undefined, done: true &#125;*/</span></span><br></pre></td></tr></table></figure><p>假如我们想要让普通的对象也能够直接支持(除了<code>Object.keys()</code>形式)<code>for...of</code>循环，那么可以考虑主动的在对象或者对象的原型对象上面部署<code>iterator</code>迭代器接口，下面简单给出对应的示例代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 方案-01 */</span></span><br><span class="line"><span class="comment">// let o = &#123;</span></span><br><span class="line"><span class="comment">//     name: &quot;Yong&quot;,</span></span><br><span class="line"><span class="comment">//     address: &quot;GuangZhou&quot;,</span></span><br><span class="line"><span class="comment">//     [Symbol.iterator]() &#123;</span></span><br><span class="line"><span class="comment">//         let idx = 0;</span></span><br><span class="line"><span class="comment">//         let map = [];</span></span><br><span class="line"><span class="comment">//         Object.keys(this).forEach(key =&gt; map.push([key, this[key]]))</span></span><br><span class="line"><span class="comment">//         return &#123;</span></span><br><span class="line"><span class="comment">//             next: () =&gt; idx &lt; map.length ? &#123; value: map[idx++], done: false &#125; </span></span><br><span class="line"><span class="comment">//              : &#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">//         &#125;;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方案-02 */</span></span><br><span class="line"><span class="built_in">Object</span>.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> map = [];</span><br><span class="line">    <span class="built_in">Object</span>.keys(<span class="built_in">this</span>).forEach(<span class="function"><span class="params">key</span> =&gt;</span> map.push([key, <span class="built_in">this</span>[key]]))</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="function">() =&gt;</span> idx &lt; map.length ? &#123; <span class="attr">value</span>: map[idx++], <span class="attr">done</span>: <span class="literal">false</span> &#125; </span><br><span class="line">          : &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Yong&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&quot;GuangZhou&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试代码 */</span></span><br><span class="line"><span class="keyword">let</span> iterator = o[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;+++++++++++++++++&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;iterator:&#x27;</span>, iterator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;+++++++++++++++++&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;key:&#x27;</span>, key, <span class="string">&quot;val:&quot;</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123; value: [ &#x27;name&#x27;, &#x27;Yong&#x27; ], done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: [ &#x27;address&#x27;, &#x27;GuangZhou&#x27; ], done: false &#125;</span></span><br><span class="line"><span class="comment">&#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">+++++++++++++++++</span></span><br><span class="line"><span class="comment">iterator: [ &#x27;name&#x27;, &#x27;Yong&#x27; ]</span></span><br><span class="line"><span class="comment">iterator: [ &#x27;address&#x27;, &#x27;GuangZhou&#x27; ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">+++++++++++++++++</span></span><br><span class="line"><span class="comment">key: name    val: Yong</span></span><br><span class="line"><span class="comment">key: address val: GuangZhou */</span></span><br></pre></td></tr></table></figure><p>如果想要更简单点，其实还可以借助 Generator 生成器函数来实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 生成器函数来实现 */</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;H&quot;</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;e&quot;</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;l&quot;</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;l&quot;</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;o&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;e:&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">e: H</span></span><br><span class="line"><span class="comment">e: e</span></span><br><span class="line"><span class="comment">e: l</span></span><br><span class="line"><span class="comment">e: l</span></span><br><span class="line"><span class="comment">e: o */</span></span><br></pre></td></tr></table></figure><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;tip&#39;&gt;本文简单说明[ 迭代器接口 Iterator]() 接口的基本使用，涉及 Array 、Set 、Map 和 String 以及伪数组等数据结构，以及 `for...of`循环的用法等。&lt;/div&gt;

&lt;div class=&quot;titleX&quot;&gt;&lt;s</summary>
      
    
    
    
    
    <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>前端开发-错误汇编</title>
    <link href="https://weibo.com/u/3800117445/2020/01/16/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-%E9%94%99%E8%AF%AF%E6%B1%87%E7%BC%96/"/>
    <id>https://weibo.com/u/3800117445/2020/01/16/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-%E9%94%99%E8%AF%AF%E6%B1%87%E7%BC%96/</id>
    <published>2020-01-16T09:45:10.000Z</published>
    <updated>2021-12-17T01:46:24.429Z</updated>
    
    <content type="html"><![CDATA[<p><strong>错误编号001</strong><br><strong>错误描述</strong> </p><p>前端项目一段时间后，打开执行命令行莫名报错。</p><p style="color:red">Error loading /Users/wendingding/Desktop/XXXX/vue.config.js:</p><p style="color:red">Error [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './dist/webpack' is not defined by "exports" in /Users/wendingding/Desktop/XXXX/node_modules/unplugin-vue-components/package.json</p><p><strong>尝试解决方式</strong>和**<a href="https://stackoverflow.com/questions/62246824/error-err-package-path-not-exported-no-exports-main-resolved-in-app-node-m">错误参考</a>** </p><p>1、执行<code>npm update</code>，不成功。<br>2、删除node_modules，删除dist文件目录，重新执行<code>npm install</code>, 不成功。<br>3、执行命令<code>npm install @babel/helper-compilation-targets --save-dev</code>，不成功。<br>4、安装最新稳定版本的node, 重新执行<code>npm run dev</code>，解决问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;错误编号001&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;错误描述&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;前端项目一段时间后，打开执行命令行莫名报错。&lt;/p&gt;
&lt;p style=&quot;color:red&quot;&gt;Error loading /Users/wendingdin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端开发-Vue项目实现多语言支持</title>
    <link href="https://weibo.com/u/3800117445/2020/01/15/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-Vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81/"/>
    <id>https://weibo.com/u/3800117445/2020/01/15/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-Vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81/</id>
    <published>2020-01-15T12:58:37.000Z</published>
    <updated>2021-12-17T01:46:16.734Z</updated>
    
    <content type="html"><![CDATA[<p><strong>插件介绍</strong></p><p>介绍：<a href="https://kazupon.github.io/vue-i18n/zh/">Vuei18n</a> 是 Vue.js 的国际化插件。它可以轻松地将一些本地化功能集成到你的 Vue.js 应用程序中。</p><p>安装：<code>npm install vue-i18n 或者 yarn add vue-i18n</code> </p><p><strong>项目使用</strong></p><p>在项目目录下面创建一个文件夹(随便叫啥名都行)，这个文件夹主要用于处理i18n模块，做两件事情。</p><p>第一件事情是需要根据vue-i18n模块来导出一个i18n的实例对象，以供项目中能够直接使用。<br>第二件事情是需要提供具体的多语言支持文件，比如支持中文、中文繁体和英文，那么就需要提供特定字段的三种语言版本，以供按实际语言来进行显示。下面给出文件目录结构。</p><img src='../../../../src/i18n.png'><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.ts文件中的代码示例：</span></span><br><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span>;</span><br><span class="line"><span class="comment">//引入语言包(模块)</span></span><br><span class="line"><span class="keyword">import</span> zh <span class="keyword">from</span> <span class="string">&#x27;./zh&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> en <span class="keyword">from</span> <span class="string">&#x27;./en&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> tw <span class="keyword">from</span> <span class="string">&#x27;./tw&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前环境的语言</span></span><br><span class="line"><span class="keyword">let</span> language = navigator.language;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;📒 日志：language = &#x27;</span>, language);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果当前环境语言非&#x27;zh-TW&#x27;, &#x27;en-US&#x27;, &#x27;zh-CN&#x27; 则默认选择中文</span></span><br><span class="line"><span class="keyword">if</span> (![<span class="string">&#x27;zh-TW&#x27;</span>, <span class="string">&#x27;en-US&#x27;</span>, <span class="string">&#x27;zh-CN&#x27;</span>].includes(language)) &#123;</span><br><span class="line">  language = <span class="string">&#x27;zh-CN&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;📒 日志：多语言处理，当前语言环境为 = &#x27;</span>, language);</span><br><span class="line"><span class="comment">// 创建i18n实例对象</span></span><br><span class="line"><span class="keyword">const</span> i18n = createI18n(&#123;</span><br><span class="line">  <span class="attr">locale</span>: language,     <span class="comment">// 设置语言</span></span><br><span class="line">  <span class="attr">messages</span>: &#123;           <span class="comment">// 设置语言包</span></span><br><span class="line">    <span class="string">&#x27;zh-CN&#x27;</span>: zh,</span><br><span class="line">    <span class="string">&#x27;en-US&#x27;</span>: en,</span><br><span class="line">    <span class="string">&#x27;zh-TW&#x27;</span>: tw</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><p>语言包其实就是就是需要多语言处理的字典，比如 我们有一个按钮，在不同的语言环境中需要分别被处理为：<code>close、关闭、關閉</code>，只需要在不同的语言包中写好对应的字典并在模块中返回，下面给出简单的对应关系。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tw.ts文件内容</span></span><br><span class="line"><span class="keyword">const</span> tw = &#123;</span><br><span class="line">  <span class="attr">message</span>: &#123;</span><br><span class="line">    <span class="attr">close</span>: <span class="string">&#x27;關閉&#x27;</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="string">&#x27;搜索&#x27;</span>,</span><br><span class="line">    <span class="attr">noFiles</span>: <span class="string">&#x27;暫無文件&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> tw;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//zh.ts文件内容</span></span><br><span class="line"><span class="keyword">const</span> zh = &#123;</span><br><span class="line">  <span class="attr">message</span>: &#123;</span><br><span class="line">    <span class="attr">close</span>: <span class="string">&#x27;关闭&#x27;</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="string">&#x27;搜索&#x27;</span>,</span><br><span class="line">    <span class="attr">noFiles</span>: <span class="string">&#x27;暂无文件&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> zh;</span><br><span class="line"></span><br><span class="line"><span class="comment">//en.ts文件内容</span></span><br><span class="line"><span class="keyword">const</span> en = &#123;</span><br><span class="line">  <span class="attr">message</span>: &#123;</span><br><span class="line">    <span class="attr">close</span>: <span class="string">&#x27;Close&#x27;</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="string">&#x27;Search&#x27;</span>,</span><br><span class="line">    <span class="attr">noFiles</span>: <span class="string">&#x27;No files&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> en;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用场景</strong></p><p>项目中大概有两种场景，一种是在DOM节点中，一种是在JS的代码中。<br>如果是DOM节点中使用，那么可以直接通过$t(‘message.xxx’)的方式来使用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="number">01</span> 节点的内容 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>&#123;&#123; $t(&#x27;message.noFiles&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">02</span> 节点的属性 --&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">InsertPanel</span> <span class="attr">:action</span>=<span class="string">&quot;action === &#x27;save&#x27; ? $t(&#x27;message.save&#x27;) : $t(&#x27;message.insert&#x27;)&quot;</span>/&gt;</span></span>    </span><br></pre></td></tr></table></figure><p>如果是在JS中使用，那么可以通过之前在src/i18n/index.ts中导出的实例对象来获取。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先导入模块</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;../i18n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字段</span></span><br><span class="line"><span class="keyword">let</span> close =  i18n.global.t(<span class="string">&#x27;message.close&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>参数处理</strong></p><p>在处理字典的时候，可能有的字典中存在一些变量，比如我在Vue的节点中需要显示的内容为：当前选择20项，在进行多语言处理前，大概写法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt; 当前选择 &#123;&#123;  count &#125;&#125; 项 &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如果我们在语言包(以zh为例)中对应的字段为: selectCout，那么可以写成下面格式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//zh.ts 文件语言包代码示例</span></span><br><span class="line"><span class="keyword">const</span> zh = &#123;</span><br><span class="line">  <span class="attr">message</span>: &#123;</span><br><span class="line">    <span class="attr">itemSelected</span>: <span class="string">&#x27;当前选择&#123;count&#125;项&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> zh;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用页面的代码示例，其中count为全局可以访问的变量</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123; $t(&#x27;message.itemSelected&#x27;,count:selectCount)&#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src='../../../../z.png' width="200px"><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;插件介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;介绍：&lt;a href=&quot;https://kazupon.github.io/vue-i18n/zh/&quot;&gt;Vuei18n&lt;/a&gt; 是 Vue.js 的国际化插件。它可以轻松地将一些本地化功能集成到你的 Vue.js 应</summary>
      
    
    
    
    
    <category term="前端开发" scheme="https://weibo.com/u/3800117445/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>源码系列 -  Promise</title>
    <link href="https://weibo.com/u/3800117445/2019/06/27/%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97%20Promise/"/>
    <id>https://weibo.com/u/3800117445/2019/06/27/%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97%20Promise/</id>
    <published>2019-06-26T16:00:08.000Z</published>
    <updated>2021-12-16T09:45:36.494Z</updated>
    
    <content type="html"><![CDATA[<div class='tip'> 本文介绍参考[PromiseA+]规范来实现一个符合规范的Promise库。</div><img src="https://github.com/flowerField/Promises/raw/master/src/promise.png"><blockquote><p>上面是ES6+实现的Promise核心方法，其整体结构也可以通过下面的打印查看</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 01-打印Promise类的内容(静态方法) */</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Promise</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出(已经省略部分内容) */</span></span><br><span class="line"><span class="comment">// length: 1                      期望形参数量((resolve,reject)=&gt;&#123;&#125;)</span></span><br><span class="line"><span class="comment">// name: &quot;Promise&quot;                类(构造函数)的名字</span></span><br><span class="line"><span class="comment">// prototype: Promise             原型对象</span></span><br><span class="line"><span class="comment">//    then: ƒ then()              then处理函数</span></span><br><span class="line"><span class="comment">//    catch: ƒ catch()            catch处理函数</span></span><br><span class="line"><span class="comment">//    finally: ƒ finally()        完成的处理函数</span></span><br><span class="line"><span class="comment">//    constructor: ƒ Promise()    原型的构造器属性</span></span><br><span class="line"><span class="comment">// race: ƒ race()                 异步任务并发先执行完</span></span><br><span class="line"><span class="comment">// reject: ƒ reject()             包装为reject     </span></span><br><span class="line"><span class="comment">// resolve: ƒ resolve()           包装为resolve</span></span><br><span class="line"><span class="comment">// all: ƒ all()                   异步任务并发都执行完</span></span><br><span class="line"><span class="comment">// allSettled: ƒ allSettled()</span></span><br><span class="line"><span class="comment">// Symbol(Symbol.species): (...)</span></span><br><span class="line"><span class="comment">// Symbol(Symbol.toStringTag): &quot;Promise&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://promisesaplus.com/">Promises/A+</a> 规范约定的Promise的实现逻辑和核心代码。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 核心注解 */</span></span><br><span class="line"><span class="comment">/* 1、Promise应该被设计为一个类(构造函数) */</span></span><br><span class="line"><span class="comment">/* 2、Promise存在三种状态，分别是pending(等待)、rejected(失败) 和 resolved(成功)。*/</span></span><br><span class="line"><span class="comment">/* 3、Promise类(构造函数)接收一个“拥有两个函数参数的函数”作为参数，我们可以称之为执行器函数(executor)立即执行。*/</span></span><br><span class="line"><span class="comment">/* 4、Promise类(构造函数)内部应该以私有函数的方式来是实现reject和resolve函数。 */</span></span><br><span class="line"><span class="comment">/* 5、Promise内部考虑到异步任务的执行(譬如定时器)Promise状态无法立即完成等待-&gt;成功|失败的切换，使用注册/订阅模式*/</span></span><br><span class="line"><span class="comment">/* 6、Promise的then方法处理失败、成功、等待态(如果存在异步任务)的Promise后续任务。 */</span></span><br><span class="line"><span class="comment">/* 7、Promise的then方法应该实现链式调用，实现的策略是总是返回一个新的Promise对象 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&quot;PENDING&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">&quot;RESOLVED&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&quot;REJECTED&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1、死循环处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;# Chaining cycle detected for promise #&lt;Promise&gt;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">/* 2、区分返回值是基本值和(Promise)的情况*/</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">&quot;object&quot;</span> &amp;&amp; x != <span class="literal">null</span>) || <span class="keyword">typeof</span> x === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> then = x.then;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                then.call(x, <span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">                    called = <span class="literal">true</span>;</span><br><span class="line">                    resolvePromise(promise, y, resolve, reject); <span class="comment">/* 递归调用 */</span></span><br><span class="line">                &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">                    called = <span class="literal">true</span>;</span><br><span class="line">                    reject(r);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = PENDING;</span><br><span class="line">        <span class="built_in">this</span>.value = <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="built_in">this</span>.rejectedCallBacks = [];</span><br><span class="line">        <span class="built_in">this</span>.resolvedCallBacks = [];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* reject 和 resolve 应该被实现为私有函数 */</span></span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> val.then(resolve, reject);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">                <span class="built_in">this</span>.status = RESOLVED;</span><br><span class="line">                <span class="built_in">this</span>.value = val;</span><br><span class="line">                <span class="built_in">this</span>.resolvedCallBacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">                <span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">                <span class="built_in">this</span>.reason = val;</span><br><span class="line">                <span class="built_in">this</span>.rejectedCallBacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 执行器函数应该立即执行，并进行异常处理 */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">        onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&quot;function&quot;</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line">        onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&quot;function&quot;</span> ? onRejected : <span class="function"><span class="params">e</span> =&gt;</span> &#123; <span class="keyword">throw</span> e &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.status === RESOLVED) &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">                        resolvePromise(promise, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        reject(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">                        resolvePromise(promise, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        reject(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">                <span class="built_in">this</span>.rejectedCallBacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">                            resolvePromise(promise, x, resolve, reject);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                            reject(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="number">0</span>);</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.resolvedCallBacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">                            resolvePromise(promise, x, resolve, reject);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                            reject(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="number">0</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 基准测试 */</span></span><br><span class="line"><span class="built_in">Promise</span>.defer = <span class="built_in">Promise</span>.deferred = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dfd = &#123;&#125;;</span><br><span class="line">    dfd.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        dfd.resolve = resolve;</span><br><span class="line">        dfd.reject = reject;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> dfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>规范基准测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install promises-aplus-tests g</span><br><span class="line"><span class="built_in">cd</span> dist</span><br><span class="line">promises-aplus-tests Promise.js</span><br></pre></td></tr></table></figure><p>Promise还有一些诸如catch和resolve等方法，下面简单给出它们的实现代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">    <span class="comment">/* .... */</span></span><br><span class="line">    <span class="keyword">catch</span> (errCallBack) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>, errCallBack); <span class="comment">/* 为了支持链式调用，此处需要return */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">finally</span>(<span class="params">callBack</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callBack()).then(<span class="function">() =&gt;</span> value);</span><br><span class="line">        &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callBack()).then(<span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;tip&#39;&gt; 本文介绍参考[PromiseA+]规范来实现一个符合规范的Promise库。&lt;/div&gt;

&lt;img src=&quot;https://github.com/flowerField/Promises/raw/master/src/promise.png</summary>
      
    
    
    
    
    <category term="源码系列" scheme="https://weibo.com/u/3800117445/tags/%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - deepClone</title>
    <link href="https://weibo.com/u/3800117445/2019/06/25/Gossip%20-%20deepClone/"/>
    <id>https://weibo.com/u/3800117445/2019/06/25/Gossip%20-%20deepClone/</id>
    <published>2019-06-24T16:00:08.000Z</published>
    <updated>2022-03-29T09:11:06.465Z</updated>
    
    <content type="html"><![CDATA[<div class='tip'>本文讨论数据的拷贝，并给出深拷贝的实现代码。</div><p>拷贝即复制<code>( copy | clone )</code>，获取指定数据副本的一种行为，理论上我们可以对任意类型的数据进行拷贝，包括但不限于<code>null、undefined、字符串、数字、布尔值、对象、函数、数组、正则表达式等</code>。</p><p>数据的拷贝，可以具体的分为<a href=""> 浅拷贝 </a>和<a href=""> 深拷贝 </a>。浅拷贝拷贝一层，副本可能存在共享问题，而深拷贝会拷贝多层，拷贝得到的副本无共享问题。</p><p>数据拷贝的方案有很多，譬如可以使用循环遍历和<code>Object.assign()</code>等方法，但这些拷贝方式都是浅拷贝。深拷贝的常见实现方案一种是利用 JSON 内置对象来进行序列化和反序列化操作，请看下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">&quot;MiTaoEr&quot;</span>, <span class="attr">info</span>: &#123; <span class="attr">address</span>: <span class="string">&quot;天津&quot;</span>, <span class="attr">color</span>: <span class="string">&quot;red&quot;</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> t = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(o));</span><br><span class="line">o.info.address = <span class="string">&quot;北京&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br><span class="line"><span class="comment">/* &#123; name: &#x27;MiTaoEr&#x27;, info: &#123; address: &#x27;天津&#x27;, color: &#x27;red&#x27; &#125; &#125; */</span></span><br></pre></td></tr></table></figure><p>我们先通过<code>JSON.stringify()</code>方法将对象序列化为 JSON 字符串，然后再进行反序列化的骚操作再转换回来，顺利完成任务。不得不说，这种拷贝对象的方式，手起刀落干净利落，但却有一点点小遗憾，遗憾的是<span style="color:#195">JSON 数据中没有函数和 undefined 类型，因此在进行序列化的过程中，对象中的这部分数据会被直接过滤掉，此外正则类型的数据也会被处理为空对象。</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;MiTaoEr&quot;</span>,</span><br><span class="line">  <span class="attr">ID</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">showName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="attr">reg</span>: <span class="regexp">/wen/</span>,</span><br><span class="line">  info: &#123; <span class="attr">address</span>: <span class="string">&quot;天津&quot;</span>,<span class="attr">color</span>: <span class="string">&quot;red&quot;</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(o)));</span><br><span class="line"><span class="comment">/* &#123; name: &#x27;MiTaoEr&#x27;,reg: &#123;&#125;,info: &#123; address: &#x27;天津&#x27;, color: &#x27;red&#x27; &#125; &#125; */</span></span><br></pre></td></tr></table></figure><p>利用 JSON 来实现深拷贝这种实现方式其实不够完美，下面给出通过递归来实现深拷贝的完美方案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 深拷贝实现函数 */</span></span><br><span class="line"><span class="keyword">let</span> deepClone = <span class="function">(<span class="params">val, wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (val == <span class="literal">null</span>) <span class="keyword">return</span> val;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> val !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> val;</span><br><span class="line">    <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (wm.has(val)) <span class="keyword">return</span> wm.get(val);</span><br><span class="line">    <span class="keyword">let</span> _instance = <span class="keyword">new</span> val.constructor;</span><br><span class="line">    wm.set(val, _instance);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val.hasOwnProperty(key)) _instance[key] = deepClone(val[key], wm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>_instance</code>是引用类型的数据，后续 for 循环的执行会更新_instance 的内容,考虑到循环引用的问题，在<code>deepClone</code>方法中用到<a href=""> WeakMap </a>类型，其中<code>wm.set</code>方法执行后<code>wm</code>中保存的数据 <code>key === value</code> ， 该对象用于数据的记忆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 001-测试代码：正常情况 */</span></span><br><span class="line"><span class="comment">//var target = &#123;name: &quot;wen-ding-ding&quot;, car:&#123;id: 666 &#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 002-测试代码：循环引用 */</span></span><br><span class="line"><span class="keyword">var</span> target = &#123;<span class="attr">name</span>: <span class="string">&quot;wen-ding-ding&quot;</span>, <span class="attr">car</span>:&#123;<span class="attr">id</span>: <span class="number">666</span> &#125;&#125;</span><br><span class="line">target.ref = target;</span><br><span class="line"><span class="keyword">var</span> result = deepClone(target);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(target, result);</span><br><span class="line"><span class="built_in">console</span>.log(target.ref === result.ref, target.ref === target); <span class="comment">/* false true */</span></span><br><span class="line">target.car.id = <span class="number">888</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result.car.id); <span class="comment">/* 666 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 003-其它数据类型测试 */</span></span><br><span class="line"><span class="comment">/* (1) 数组 */</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = deepClone(arr1);</span><br><span class="line">arr1.push(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2);</span><br><span class="line"><span class="comment">/* [ 100, 200, 300, 400 ] [ 100, 200, 300 ] */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (2) 日期 */</span></span><br><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> date2 = deepClone(date1);</span><br><span class="line"><span class="built_in">console</span>.log(date1,date2,date1 == date2)</span><br><span class="line"><span class="comment">/* 2019-08-24T11:00:21.379Z 2019-08-24T11:00:21.379Z false*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (3) null 和 undefined */</span></span><br><span class="line"><span class="built_in">console</span>.log(deepClone(<span class="literal">null</span>),deepClone(<span class="literal">undefined</span>))</span><br><span class="line"><span class="comment">/* null undefined */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (4) 正则 */</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/</span>);</span><br><span class="line"><span class="keyword">var</span> reg2 = deepClone(reg1);</span><br><span class="line"><span class="built_in">console</span>.log(reg1,reg2,reg1 == reg2)</span><br><span class="line"><span class="comment">/* /\&#123;\&#123;(.+?)\&#125;\&#125;/ /\&#123;\&#123;(.+?)\&#125;\&#125;/ false */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* (5) 基本值 */</span></span><br><span class="line"><span class="built_in">console</span>.log(deepClone(<span class="string">&quot;wen-ding-ding&quot;</span>),deepClone(<span class="number">2019</span>),deepClone(<span class="literal">true</span>))</span><br><span class="line"><span class="comment">/* wen-ding-ding 2019 true */</span></span><br></pre></td></tr></table></figure><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;tip&#39;&gt;本文讨论数据的拷贝，并给出深拷贝的实现代码。&lt;/div&gt;

&lt;p&gt;拷贝即复制&lt;code&gt;( copy | clone )&lt;/code&gt;，获取指定数据副本的一种行为，理论上我们可以对任意类型的数据进行拷贝，包括但不限于&lt;code&gt;null、unde</summary>
      
    
    
    
    
    <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>Gossip - defineProperty</title>
    <link href="https://weibo.com/u/3800117445/2019/06/25/Gossip%20-%20defineProperty/"/>
    <id>https://weibo.com/u/3800117445/2019/06/25/Gossip%20-%20defineProperty/</id>
    <published>2019-06-24T16:00:08.000Z</published>
    <updated>2021-12-16T09:45:36.464Z</updated>
    
    <content type="html"><![CDATA[<div class='tip'>本文介绍`Object.defineProperty()`方法，并基于此简单讨论数据劫持的实现方案。</div><h3 id="defineProperty"><a href="#defineProperty" class="headerlink" title="defineProperty"></a>defineProperty</h3><p><code>Object.getOwnPropertyDescriptor(target,attrName)</code>方法用于获取对象的属性描述符对象，该方法的第一个参数为目标对象，第二个参数为指定的属性名。</p><p>我们可以利用该方法来查看对象属性的描述符配置项(包括：<code>value值</code>、<code>writable可重写</code>、<code>enumerable可枚举</code>和<code>configurable可配置</code>等)。默认正常的对象属性中，这些配置项的值都是 <code>true</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">&quot;文顶顶&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> des = <span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(des);</span><br><span class="line"><span class="comment">/* &#123; value: &#x27;文顶顶&#x27;,writable: true,enumerable: true,configurable: true &#125; */</span></span><br></pre></td></tr></table></figure><p><code>Object.defineProperty(target,attrName,options)</code>方法用于定义(设置)对象并对指定的属性描述符对象进行配置。该方法的第一个参数为目标对象，第二个参数为指定的属性名，第三个参数为配置对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 备注：给o对象添加address属性，并设置属性值为香悦山 */</span></span><br><span class="line"><span class="comment">/* 说明：默认新添加的属性，属性描述配置项均为false */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">&quot;文顶顶&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">&quot;address&quot;</span>, &#123; <span class="attr">value</span>: <span class="string">&quot;香悦山&quot;</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">&quot;address&quot;</span>));</span><br><span class="line"><span class="comment">/* &#123; value: &#x27;香悦山&#x27;,writable: false,enumerable: false,configurable: false &#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 备注：重新定义age属性，设置属性值为20，该属性值可配置但无法重写和枚举 */</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">&quot;age&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="attr">writable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">&quot;age&quot;</span>));</span><br><span class="line"><span class="comment">/* &#123; value: 20,writable: false,enumerable: false,configurable: true &#125; */</span></span><br><span class="line">o.age = <span class="number">99</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.age); <span class="comment">//20</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, o[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* name 文顶顶 */</span></span><br><span class="line"><span class="comment">/* 在for...in循环中，age键值对 ，以及新添加的address键值对均没有被枚举 */</span></span><br></pre></td></tr></table></figure><p><code>Object.defineProperties(target,options)</code>方法用于一次性设置(<code>添加</code>)对象的多个属性，与之对应的<code>Object.getOwnPropertyDescriptors(target)</code>方法用于获取对象中所有成员的 <strong>详细</strong> 配置信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperties(o, &#123;</span><br><span class="line">    <span class="string">&quot;className&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;H5&quot;</span>,</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;friends&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: [<span class="string">&quot;胡适&quot;</span>, <span class="string">&quot;沈从文&quot;</span>, <span class="string">&quot;辜鸿铭&quot;</span>],</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;_____&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(o));</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123;   name:&#123; value: &#x27;文顶顶&#x27;, writable: true,enumerable: true,configurable: true &#125;,</span></span><br><span class="line"><span class="comment">    age:&#123; value: 20,writable: false,enumerable: false,configurable: true &#125;,</span></span><br><span class="line"><span class="comment">    address:&#123; value: &#x27;香悦山&#x27;,writable: false,enumerable: false,configurable: false &#125;,</span></span><br><span class="line"><span class="comment">    className:&#123; value: &#x27;H5&#x27;,writable: false,enumerable: false,configurable: true &#125;,</span></span><br><span class="line"><span class="comment">    friends:&#123; value: [ &#x27;胡适&#x27;, &#x27;沈从文&#x27;, &#x27;辜鸿铭&#x27; ],</span></span><br><span class="line"><span class="comment">              writable: true, enumerable: false,configurable: true &#125; &#125; */</span></span><br></pre></td></tr></table></figure><div class='tip'>[Object.defineProperty ]()方法主要用于对象中的某个属性进行访问配置，如果需要对整个对象执行类似的操作则可使用`Object.preventExtensions()`、`Object.seal()`和`Object.freeze()` 等方法，它们分别对应着`禁止扩展`、`密封对象`以及要`冻结`对象。</div><h3 id="Getter-and-Setter"><a href="#Getter-and-Setter" class="headerlink" title="Getter and Setter"></a>Getter and Setter</h3><p>对于对象字面量创建的对象而言，我们可以直接通过<code>get attrName</code>或<code>set attrName</code>的方式来对属性的设置和读取操作进行拦截和监听。通过下面的代码，我们可以观察到，对象属性的 Getter 和 Setter 的代码并不复杂但却需要借助一个无关的中间变量<code>_age</code>来实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* getter 和 setter */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;文顶顶&quot;</span>,</span><br><span class="line">    <span class="attr">_age</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title">age</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;监听到执行了getter方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._age;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title">age</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;监听到执行了setter方法&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>._age = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o.age);</span><br><span class="line">o.age = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.age);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">监听到执行了getter方法</span></span><br><span class="line"><span class="comment">17</span></span><br><span class="line"><span class="comment">监听到执行了setter方法</span></span><br><span class="line"><span class="comment">监听到执行了getter方法</span></span><br><span class="line"><span class="comment">100 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>Object.defineProperty()</code>方法的配置对象中也支持对象属性的 <code>Getter</code> 和 <code>Setter</code>操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">&quot;文顶顶&quot;</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(o, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;——getter———&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;——setter———&quot;</span>);</span><br><span class="line">            temp = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(o.age);</span><br><span class="line">    o.age = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(o.age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行情况 */</span></span><br><span class="line">    <span class="comment">// ——getter———</span></span><br><span class="line">    <span class="comment">// 18</span></span><br><span class="line">    <span class="comment">// ——setter———</span></span><br><span class="line">    <span class="comment">// ——getter———</span></span><br><span class="line">    <span class="comment">// 100</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><hr>利用`Object.defineProperty()`方法，来监听对象属性的设置和读取操作，可以不必借助于中间属性来实现而改用一个外部变量即可，这样的处理方式为代码的封装提供了可能。<p><strong>注意</strong> 在 <code>defineProperty</code> 方法内部使用 <code>set 和 get</code> 函数时不能与 <code>value 和 writable</code> 共存。上述的代码演示了监听对象单个属性读写的方案，如果需要为对象中所有的属性都添加 <code>set 和 get</code> 监听，可以考虑对上述代码进行封装。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">&quot;object&quot;</span> || target == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target.hasOwnProperty(key)) defineReactive(target, key, target[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> defineReactive = <span class="function">(<span class="params">target, key, val</span>) =&gt;</span> &#123;</span><br><span class="line">    observer(val); <span class="comment">/* 递归解决多层对象解构问题 */</span></span><br><span class="line">    <span class="comment">/* val 是外部传入的参数：就是指定属性的默认值 */</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            handler(<span class="string">&quot;getter&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">_val</span>)</span> &#123;</span><br><span class="line">            handler(<span class="string">&quot;setter&quot;</span>)</span><br><span class="line">            val = _val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;监听到&quot;</span> + text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试代码 */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">&quot;文顶顶&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">car</span>: &#123; <span class="attr">color</span>: <span class="string">&quot;white&quot;</span> &#125; &#125;;</span><br><span class="line">observer(o);</span><br><span class="line">o.age = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.age);</span><br><span class="line">o.car.color = <span class="string">&quot;black&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.car.color);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行情况 */</span></span><br><span class="line"><span class="comment">// 监听到setter</span></span><br><span class="line"><span class="comment">// 监听到getter</span></span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="comment">// 监听到getter</span></span><br><span class="line"><span class="comment">// 监听到setter</span></span><br><span class="line"><span class="comment">// 监听到getter</span></span><br><span class="line"><span class="comment">// 监听到getter</span></span><br><span class="line"><span class="comment">// black</span></span><br></pre></td></tr></table></figure><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;tip&#39;&gt;本文介绍`Object.defineProperty()`方法，并基于此简单讨论数据劫持的实现方案。&lt;/div&gt;

&lt;h3 id=&quot;defineProperty&quot;&gt;&lt;a href=&quot;#defineProperty&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>数据安全系列 - XOR</title>
    <link href="https://weibo.com/u/3800117445/2019/06/25/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20XOR/"/>
    <id>https://weibo.com/u/3800117445/2019/06/25/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%20XOR/</id>
    <published>2019-06-24T16:00:08.000Z</published>
    <updated>2022-03-29T09:11:44.081Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文简单介绍计算机体系中的异或运算，运算其特点以及在数据安全领域的应用。</p></blockquote><h3 id="异或运算介绍"><a href="#异或运算介绍" class="headerlink" title="异或运算介绍"></a>异或运算介绍</h3><p><strong>XOR</strong> 全称为<code>exclusive OR</code>,简写为 XOR，中文称为<strong>异或运算</strong>。</p><p>异或运算是一种数学运算符，主要应用于逻辑运算和计算机体系中的位运算。异或运算的数学符号常表示为“⊕”，运算法则为：<code>A ⊕ B = (¬A ∧B) ∨ (A ∧¬B)</code>。<br>简单研究下 1 个位（比特）的异或运算。</p><div style='font-Size:16px;color:#190;border:1px dashed #000;width:350px;padding:10px;text-align:center'> 0 ⊕ 0 = 0；（0与0异或运算的结果为0）0 ⊕ 1 = 1；（0与1异或运算的结果为1）1 ⊕ 0 = 1；（1与0异或运算的结果为1）1 ⊕ 1 = 0；（1与1异或运算的结果为0）</div><p>异或运算可以类比于<span style='text-decoration:underline;color:#f66;'>奇偶数的加法运算</span>或者是<span style='text-decoration:underline ; color:#F66;'>翻牌处理</span>。在按位运算的过程中，参与运算的数值只有两种可能，那么为 0 要么为 1，在这里 0 为偶数，1 位奇数，可以得出下面的运算特征，我们发现结果和异或运算是一致的。</p><div style='font-Size:16px;color:#456;border:1px dashed #000;width:500px;padding:10px;text-align:center'> 偶数 + 偶数 = 偶数；（偶数与偶数相加运算的结果为偶数）偶数 + 奇数 = 奇数；（偶数与奇数相加运算的结果为奇数）奇数 + 偶数 = 奇数；（奇数与偶数相加运算的结果为奇数）奇数 + 奇数 = 偶数；（奇数与奇数相加运算的结果为偶数）</div><p>接下来我们来看下所谓的<strong>翻牌处理</strong>。我们可以想象一下，假如桌面中有一张扑克牌，对应二进制总位的异或运算有 0 和 1 两种情况，那么对于扑克牌也有两种情况，那么就是不翻转和翻转，我们找到它们的对应关系。</p><img src='../../../../src/xor02.jpeg?raw=true' width='150px'><p>接下来我们来分析下对扑克牌进行翻转|不翻转处理以及对应特征，我们发现结果和异或运算是一致的。</p><img src='../../../../src/xor03.png'><p>**异或运算的特征可以简单的归纳为：<code>相同为0，不同为1</code>**。</p><h3 id="常用位运算符补充"><a href="#常用位运算符补充" class="headerlink" title="常用位运算符补充"></a>常用位运算符补充</h3><p>位操作符用于最基本的层次，它们按照内存中表示数值的位来操作数值，位运算符主要有：<strong>按位与（&amp;）</strong>、<strong>按位或（|）</strong>、<strong>按位异或（^）</strong>、<strong>按位取反（~）</strong>、<strong>左移（&lt;&lt;）**和**右移（&gt;&gt;）</strong>，这里将简单介绍常用的位运算符以及其基本特征作为补充。</p><p><strong>按位或运算（OR）</strong>的运算符为<code>|</code>, 是双目运算符，其运算特征是：<code>两个运算数中有1则为1，否则为0</code>。</p><p><strong>按位与运算（AND）</strong>的运算符为<code>&amp;</code>，是双目运算符，其运算特征是：<code>只有当两个操作数均为1的时候结果为1，否则为0（也可以理解为：两个运算数中有0则为0，否则为1）</code>。</p><p><span style='color:#195'><strong>OR&nbsp;运算</strong></span>&nbsp; &nbsp;<span style='border:1px solid #000'><strong>&nbsp; &nbsp;1 | 1 = 1，1 | 0 = 1， 0 | 1 = 1，0 | 0 = 0 &nbsp; &nbsp;</strong></span></p><p><span style='color:#195'><strong>AND 运算</strong></span> <span style='border:1px solid #000'><strong>&nbsp; &nbsp;1 &amp; 1 = 1，1 &amp; 0 = 0， 0 &amp; 1 = 0，0 &amp; 0 = 0 &nbsp; &nbsp;</strong></span></p><p><strong>按位取反运算（NOT）</strong>也称为按位非运算，运算符为<code>~</code>，单目运算符。对操作数执行按位取反会返回操作数的反码，其运算本质为：<strong>操作数的负值-1</strong>。为了理解这一点，必须搞清楚下面的这些基本概念。</p><p>在处理数据的时候，通常把数据分为<code>有符号</code>和<code>无符号</code>的，如果我们使用 32 位二进制码（不同语言有差异表示数据，那么对于有符号的整数，则 32 位中的前 31 位用于表示整数的值。第 32 位用于表示数值的符号：其中 0 表示正数，1 表示负数。第 32 位被称为符号位。如果要表示 19 这个数字，那么其二进制码形式如下：<span style='color:#195'>00000000 00000000 00000000 00010011 </span>需要注意的是，虽然负数在使用二进制码表示的时候使用的格式是二进制补码。下面给出负数的二进制补码表示方式的处理过程：</p><blockquote><p>[1] 求负数绝对值的二进制码。<br>[2] 求该二进制码的反码形式。<br>[3] 对得到的二进制反码加一。</p></blockquote><p>这里，我们以-19 为例子来演示负数的表示方式。</p><p>19 的二进制码 <span style='color:#195'>00000000 00000000 00000000 00010011</span><br>二进制码反码 11111111 11111111 11111111 11101100<br>上面反码加 ① <span style='color:#f22'>11111111 11111111 11111111 11101101</span></p><p>我们回到按位非（NOT）的操作中来，它的结算特点是每个参与计算的二进制位都取反，相当于是求二进制的反码。我们已经知道负数的二进制表示方式，应该也就能够理解<code>对操作数进行按位非操作结果其实就是操作数的负值-1</code>。因为操作数的负值表示需要（反码 + 1），而我们需要的结果是反码，所以只需要倒退一步即可。</p><h3 id="XOR-和密码体系"><a href="#XOR-和密码体系" class="headerlink" title="XOR 和密码体系"></a>XOR 和密码体系</h3><p>现在我们已经清楚了异或运算的特点，而且掌握了 1 个二进制位的异或运算方式，那么下面我们来看一个稍微复杂点的例子，尝试着对一系列的二进制位进行异或处理。</p><img src='../../../../src/xor04.png'><p>上面的示例中我们使用两个 8 位的二进制系列 A 和 B 进行异或运算，其中 A 的内容为 0101 0001，B 的内容为 0010 0101。在对多个比特序列进行异或运算的时候，需要分别对每一位的数据进行异或运算以得到结果。这里 A ⊕ B 得到的最终结果为 C，其内容是 0111 0100。</p><p>上面的计算过程非常简单，这里要特别说明的是因为异或运算的特点是：<code>相同为0，不同为1</code>, 所以考虑如果把 A ⊕ B 得到的结果 和 B 再次进行 XOR 运算，那么结果会变回 A，即 A ⊕ B = C ，C ⊕ B = A 。下面给出具体的图示：</p><img src='../../../../src/xor05.png'><p>**<span style='color:#195'>XOR 运算的可逆性可以用来恢复原值，这在加密算法中意义非凡</span>**。</p><p>源于 XOR 运算的以上特性，其实完全可以利用简单异或运算设计出一款高强度的密码算法，我们把 A 作为原文，B 作为密钥，C 作为密文，对应的密码算法为：</p><p><strong>加密算法</strong> <span style='border:1px solid #000'>**&nbsp; &nbsp;原文 ⊕ 密钥 =&gt; 密文 &nbsp; &nbsp; <strong></span><br><strong>解密算法</strong> <span style='border:1px solid #000'></strong>&nbsp; &nbsp;密文 ⊕ 密钥 =&gt; 原文 &nbsp; &nbsp; **</span></p><img src='../../../../src/xor07.png'><p>我们来简单看一下上面的图形展示，图形中我们把<code>实心的点假设为1，空性的点假设为0</code>，那么第一张图相当于明文（原文），第二张图作为蒙版（相当于密钥）盖在第一张图上的时候可以得到第三张图形（相当于密文），这个过程是可逆的，如果把第二张图片盖在第三张图片上面那么将能够还原出第一张图形来。接下来我们来看下字符串的处理情况，假设对<code>miao和nice</code>进行操作，它们在进行 XOR 运算后将得到一个位数相同的二进制码，把得到的二进制码和<code>nice</code>再进行 XOR 运算将能够恢复得到原文<code>miao</code>字符串。下面给出具体的图示：</p><img src='../../../../src/xor06.png'><p>其实像上面的这样的处理方式早在 1917 年就由维纳（<code>G·S Vernam</code>）提出了，被称为<strong>一次性密码</strong>，一次性密码的加密解密方式决定了它在理论上永远无法被破译，这一特性于 1949 年由香农通过数学方法加以证明。但实际上，这样简单的一次性密码并没有在现实中被广泛使用，原因有以下几点：<span style='color:#195'>① 因为加密解密使用的是相同的密钥，所以无法保证密钥的配送和保存的安全。② 因为密钥的长度需要和明文匹配，所以意味着明文有 500MB，那么密钥也必须 500MB。③ 在一次性密码中需要生成大量真正的随机数，这很难实现。</span></p><p>不过，虽然直接应用 XOR 运算的可逆性实现的一次性密码算法无法在商业中真正应用，但我们还是能在很多经典的加密算法（比如，<code>DES</code>和<code>AES</code>）中看到 XOR 运算的身影。关于异或运算在其他算法中的应用，这里我们不做展开，相关的内容我将再写一篇新的文章来说明。。</p><img src='../../../../z.png' width="200px"><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文简单介绍计算机体系中的异或运算，运算其特点以及在数据安全领域的应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;异或运算介绍&quot;&gt;&lt;a href=&quot;#异或运算介绍&quot; class=&quot;headerlink&quot; title=&quot;异或运算介绍&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
  <entry>
    <title>疑难杂症-gyp: No Xcode or CLT version detected</title>
    <link href="https://weibo.com/u/3800117445/2019/05/06/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-gyp:%20No%20Xcode%20or%20CLT%20version%20detected/"/>
    <id>https://weibo.com/u/3800117445/2019/05/06/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87-gyp:%20No%20Xcode%20or%20CLT%20version%20detected/</id>
    <published>2019-05-06T15:58:37.000Z</published>
    <updated>2021-12-16T09:45:36.495Z</updated>
    
    <content type="html"><![CDATA[<p>当Mac升级到High sierra 后，在终端中使用 <code>npm install</code> 或者 <code>yarn</code> 的时候，显示提示信息 <code>gyp: No Xcode or CLT version detected! </code>, 表示缺失了 XCode 的 CLI 工具。</p><img src='../../../../src/xcode_test.jpg'><p>尝试在终端中使用管理员权限执行下面的命令来安装该工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select --install</span><br></pre></td></tr></table></figure><p>如果问题还没有解决，尝试先删除原本的命令行工具，然后再执行上面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf $(xcode-select -p)  或者是  rm -rf /Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure><img src='../../../../ZS.png' width="200px"><img src='../../../../z.png' width="200px"><hr><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当Mac升级到High sierra 后，在终端中使用 &lt;code&gt;npm install&lt;/code&gt; 或者 &lt;code&gt;yarn&lt;/code&gt; 的时候，显示提示信息 &lt;code&gt;gyp: No Xcode or CLT version detected! &lt;/code&gt;</summary>
      
    
    
    
    
    <category term="疑难杂症" scheme="https://weibo.com/u/3800117445/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>Gossip -   generate Virtual-DOM</title>
    <link href="https://weibo.com/u/3800117445/2019/05/06/Gossip%20-%20generate%20Virtual-DOM/"/>
    <id>https://weibo.com/u/3800117445/2019/05/06/Gossip%20-%20generate%20Virtual-DOM/</id>
    <published>2019-05-05T16:00:08.000Z</published>
    <updated>2021-12-16T09:45:36.465Z</updated>
    
    <content type="html"><![CDATA[<div class='tip'>在 [ast && render](http://wendingding.com/2019/08/26/Gossip%20-%20ast%20&&%20render/) 这篇文章中介绍了 ast 树和 render函数生成的过程，本文介绍通过 `render函数创建DOM`的基本过程(仅仅核心部分)，更多的细节也可以参考 [Vue 框架源码](https://github.com/vuejs)自行探索 。</div><img src='../../../../src/virtual_01.png'><div class="titleX"><strong>Render => Virtual-DOM</strong></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 模拟数据 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">&quot;刘毅&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> _c(<span class="string">&quot;a&quot;</span>, &#123; <span class="attr">id</span>: <span class="string">&quot;app&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;标题&quot;</span> &#125; , _c(<span class="string">&quot;p&quot;</span>, <span class="literal">null</span>, _v(<span class="string">&quot;hello&quot;</span>)),</span><br><span class="line">        _c(<span class="string">&quot;span&quot;</span>, <span class="literal">null</span>, _v(<span class="string">&quot;My name is&quot;</span> + _s(name))));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(...arguments);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_v</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createTextNode(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关键：用于处理插值模板 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_s</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val == <span class="literal">null</span> ?<span class="string">&#x27;&#x27;</span>: (<span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span>?<span class="built_in">JSON</span>.stringify(val):val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建节点函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">tag, data = &#123;&#125;, ...children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v_node(tag, data, <span class="literal">null</span>, children, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建文本内容 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTextNode</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v_node(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建虚拟 DOM 方法：把数据组织成对象返回 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v_node</span>(<span class="params">tag, data, key, children, text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; tag, data, key, children, text &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vNode = render();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;vNode&#x27;</span>, vNode);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印输出 */</span></span><br><span class="line"><span class="comment">// vNode </span></span><br><span class="line"><span class="comment">// &#123; tag: &#x27;a&#x27;,</span></span><br><span class="line"><span class="comment">//   data: &#123; id: &#x27;app&#x27;, title: &#x27;标题&#x27; &#125;,</span></span><br><span class="line"><span class="comment">//   key: null,</span></span><br><span class="line"><span class="comment">//   text: null,</span></span><br><span class="line"><span class="comment">//   children:</span></span><br><span class="line"><span class="comment">//    [ &#123; tag: &#x27;p&#x27;, data: null, key: null, children: [Array], text: null &#125;,</span></span><br><span class="line"><span class="comment">//      &#123; tag: &#x27;span&#x27;, data: null,key: null,children: [Array],text: null &#125; </span></span><br><span class="line"><span class="comment">//    ]</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br></pre></td></tr></table></figure><p>给出上面代码生成的<code>虚拟 DOM</code>对应的对象结构图。</p><img src='../../../../src/virtual_02.png'><div class="titleX"><strong> Vue 框架源码核心 </strong></div><p>在 <a href="https://github.com/vuejs">Vue 框架中</a>，我们主要三种方式来渲染标签。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、实例化 Vue 的过程中，通过 el 来选择实例挂载的标签。</span><br><span class="line">2、实例化 Vue 的过程中，通过 template 标签字符串模板来渲染标签。</span><br><span class="line">3、实例化 Vue 的过程中，直接通过 render 函数的方式来渲染标签，这也是底层的方法。</span><br></pre></td></tr></table></figure><p>我们给出对应的 Vue 渲染标签(组件)的对应代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app3&quot;</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="comment">/* 第一种方式： 通过 配置项中的 el 参数来挂载 */</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">         <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span></span></span><br><span class="line"><span class="javascript">     &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="comment">/* 第二种方式：通过template 模板 */</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">         <span class="attr">template</span>: <span class="string">`&lt;div class=&quot;box&quot;&gt;我是模板内容&lt;/div&gt;`</span></span></span><br><span class="line"><span class="javascript">     &#125;);</span></span><br><span class="line"><span class="javascript">     vm2.$mount(<span class="string">&quot;#app2&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="comment">/* 第三种方式：通过 render 函数渲染 */</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">let</span> vm3 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">         <span class="function"><span class="title">render</span>(<span class="params">c</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> c(<span class="string">&#x27;div&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                 <span class="attr">attrs</span>: &#123;</span></span><br><span class="line"><span class="javascript">                     <span class="attr">title</span>: <span class="string">&quot;标题&quot;</span>,</span></span><br><span class="line"><span class="javascript">                     <span class="attr">idx</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">                 &#125;,</span></span><br><span class="line"><span class="javascript">                 <span class="attr">class</span>: &#123;</span></span><br><span class="line"><span class="javascript">                     <span class="string">&#x27;is-red&#x27;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                 &#125;</span></span><br><span class="line"><span class="javascript">             &#125;, [</span></span><br><span class="line"><span class="javascript">               c(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;我是a&#x27;</span>),</span></span><br><span class="line"><span class="javascript">               c(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="attr">class</span>: <span class="string">&quot;span-class&quot;</span>&#125;, <span class="string">&#x27;我是span&#x27;</span>),</span></span><br><span class="line"><span class="javascript">               ])</span></span><br><span class="line"><span class="javascript">         &#125;</span></span><br><span class="line"><span class="javascript">     &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     vm3.$mount(<span class="string">&quot;#app3&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="comment">/* 测试数据 */</span></span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(vm1.$el);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(vm2.$el);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(vm3.$el);</span></span><br><span class="line"><span class="javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过三种方式来进行渲染，它们将生成下面的标签结构。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是模板内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;标题&quot;</span> <span class="attr">idx</span>=<span class="string">&quot;1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;is-red&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span-class&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>我是a<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在三种渲染的方式中，其中<code>el</code> 把挂载渲染的标签到页面，<code>template</code> 会直接执行替换操作，<code>render</code>函数同 template 一致。我们知道，无论使用什么样的方式来渲染 Vue框架的内部最终都是使用 <code>render</code>函数来进行处理的。</p><p>接下来，我这里通过代码简单模拟 render 函数渲染生成标签和虚拟 DOM 的过程。为了保持基本一致，我这里改造下上文的代码，并提供 Vue 这个构造函数(Class),并把涉及到的诸多方法都写到Vue原型对象上面以供实例化对象调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第一部分代码：主要处理模板编译 */</span></span><br><span class="line"><span class="comment">/* 形如：abc-123 */</span></span><br><span class="line"><span class="keyword">const</span> nc_name = <span class="string">`[a-zA-Z_][\\-\\.0-9_a-zA-Z]*`</span>;</span><br><span class="line"><span class="comment">/* 形如：&lt;aaa:bbb&gt; */</span></span><br><span class="line"><span class="keyword">const</span> q_nameCapture = <span class="string">`((?:<span class="subst">$&#123;nc_name&#125;</span>\\:)?<span class="subst">$&#123;nc_name&#125;</span>)`</span>;</span><br><span class="line"><span class="comment">/* 形如：&lt;div   匹配开始标签的左半部分 */</span></span><br><span class="line"><span class="keyword">const</span> startTagOpen = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;<span class="subst">$&#123;q_nameCapture&#125;</span>`</span>);</span><br><span class="line"><span class="comment">/* 匹配开始标签的右半部分(&gt;) 形如`&gt;`或者`  &gt;`前面允许存在 N(N&gt;=0)个空格 */</span></span><br><span class="line"><span class="keyword">const</span> startTagClose = <span class="regexp">/^\s*(\/?)&gt;/</span>;</span><br><span class="line"><span class="comment">/* 匹配闭合标签：形如 &lt;/div&gt; */</span></span><br><span class="line"><span class="keyword">const</span> endTag = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^&lt;\\/<span class="subst">$&#123;q_nameCapture&#125;</span>[^&gt;]*&gt;`</span>);</span><br><span class="line"><span class="comment">/* 匹配属性节点：形如 id=&quot;app&quot; 或者 id=&#x27;app&#x27; 或者 id=app 等形式的字符串 */</span></span><br><span class="line"><span class="keyword">const</span> att=<span class="regexp">/^\s*([^\s&quot;&#x27;&lt;&gt;\/=]+)(?:\s*(=)\s*(?:&quot;([^&quot;]*)&quot;+|&#x27;([^&#x27;]*)&#x27;+|([^\s&quot;&#x27;=&lt;div&gt;`]+)))?/</span></span><br><span class="line"><span class="comment">/* 匹配插值语法：形如 &#123;&#123;msg&#125;&#125; */</span></span><br><span class="line"><span class="keyword">const</span> defaultTagRE = <span class="regexp">/\&#123;\&#123;((?:.|\r?\n)+?)\&#125;\&#125;/g</span>;</span><br><span class="line"><span class="comment">/* 标记节点类型(文本节点) */</span></span><br><span class="line"><span class="keyword">let</span> NODE_TYPE_TEXT = <span class="number">3</span>;</span><br><span class="line"><span class="comment">/* 标记节点类型(元素节点) */</span></span><br><span class="line"><span class="keyword">let</span> NODE_TYPE_ELEMENT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compiler</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = []; <span class="comment">/* 数组模拟栈结构 */</span></span><br><span class="line">    <span class="keyword">let</span> currentParent;</span><br><span class="line">    <span class="keyword">let</span> root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 推进函数：每处理完一部分模板就向前推进删除一段 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">advance</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        html = html.substring(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">tag, attrs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> element = createASTElement(tag, attrs);</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            root = element;</span><br><span class="line">        &#125;</span><br><span class="line">        currentParent = element;</span><br><span class="line">        stack.push(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params">tagName</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> element = stack.pop();</span><br><span class="line">        currentParent = stack[stack.length - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (currentParent) &#123;</span><br><span class="line">            element.parent = currentParent;</span><br><span class="line">            currentParent.children.push(element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 文本处理函数：&lt;span&gt;  hello &lt;span&gt; =&gt; text的值为 &quot; hello &quot;*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">chars</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* 1.先处理文本字符串中所有的空格，全部替换为空 */</span></span><br><span class="line">        <span class="comment">// text = text.replace(/\s/g, &#x27;&#x27;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 2.把数据组织成&#123;text:&quot;hello&quot;,type:3&#125;的形式保存为当前父节点的子元素 */</span></span><br><span class="line">        <span class="keyword">if</span> (text) &#123;</span><br><span class="line">            currentParent.children.push(&#123;</span><br><span class="line">                text,</span><br><span class="line">                <span class="attr">nodeType</span>: NODE_TYPE_TEXT</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createASTElement</span>(<span class="params">tag, attrs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            tag,</span><br><span class="line">            attrs,</span><br><span class="line">            <span class="attr">children</span>: [],</span><br><span class="line">            <span class="attr">parent</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">nodeType</span>: NODE_TYPE_ELEMENT</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解析开始标签部分：主要提取标签名和属性节点 */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parser_start_html</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 00-正则匹配 &lt;div id=&quot;app&quot; title=&quot;标题&quot;&gt;模板结构*/</span></span><br><span class="line">        <span class="keyword">let</span> start = html.match(startTagOpen);</span><br><span class="line">        <span class="keyword">if</span> (start) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 01-提取标签名称 形如 div */</span></span><br><span class="line">            <span class="keyword">const</span> tagInfo = &#123;</span><br><span class="line">                <span class="attr">tag</span>: start[<span class="number">1</span>],</span><br><span class="line">                <span class="attr">attrs</span>: []</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除&lt;div部分 */</span></span><br><span class="line">            advance(start[<span class="number">0</span>].length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 02-提取属性节点部分 形如：id=&quot;app&quot; title=&quot;标题&quot;*/</span></span><br><span class="line">            <span class="keyword">let</span> attr, end;</span><br><span class="line">            <span class="keyword">while</span> (!(end = html.match(startTagClose)) &amp;&amp; (attr = html.match(att))) &#123;</span><br><span class="line">                tagInfo.attrs.push(&#123;</span><br><span class="line">                    <span class="attr">name</span>: attr[<span class="number">1</span>],</span><br><span class="line">                    <span class="attr">value</span>: attr[<span class="number">3</span>] || attr[<span class="number">4</span>] || attr[<span class="number">5</span>]</span><br><span class="line">                &#125;);</span><br><span class="line">                advance(attr[<span class="number">0</span>].length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 03-处理开始标签 形如 &gt;*/</span></span><br><span class="line">            <span class="keyword">if</span> (end) &#123;</span><br><span class="line">                advance(end[<span class="number">0</span>].length);</span><br><span class="line">                <span class="keyword">return</span> tagInfo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (html) &#123;</span><br><span class="line">        <span class="keyword">let</span> textTag = html.indexOf(<span class="string">&#x27;&lt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果以&lt;开头 */</span></span><br><span class="line">        <span class="keyword">if</span> (textTag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* (1) 可能是开始标签 形如:&lt;div id=&quot;app&quot;&gt; */</span></span><br><span class="line">            <span class="keyword">let</span> startTagMatch = parser_start_html();</span><br><span class="line">            <span class="keyword">if</span> (startTagMatch) &#123;</span><br><span class="line">                start(startTagMatch.tag, startTagMatch.attrs);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* (2) 可能是结束标签 形如:&lt;/div&gt;*/</span></span><br><span class="line">            <span class="keyword">let</span> endTagMatch = html.match(endTag);</span><br><span class="line">            <span class="keyword">if</span> (endTagMatch) &#123;</span><br><span class="line">                advance(endTagMatch[<span class="number">0</span>].length);</span><br><span class="line">                end(endTagMatch[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 文本内容的处理 */</span></span><br><span class="line">        <span class="keyword">let</span> text;</span><br><span class="line">        <span class="keyword">if</span> (textTag &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            text = html.substring(<span class="number">0</span>, textTag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (text) &#123;</span><br><span class="line">            advance(text.length);</span><br><span class="line">            chars(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ****************** */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateAttrs</span>(<span class="params">attrs</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 1.初始化空字符 */</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">/* 2.遍历属性节点数组，并按既定格式拼接 */</span></span><br><span class="line">    attrs.forEach(<span class="function">(<span class="params">attr, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* 2.1 如果属性节点名称为 style那么则对 value进行中间处理 */</span></span><br><span class="line">        <span class="keyword">if</span> (attr.name === <span class="string">&#x27;style&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">            attr.value.split(<span class="string">&#x27;;&#x27;</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> [key, value] = item.split(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">                obj[key] = value</span><br><span class="line">            &#125;);</span><br><span class="line">            attr.value = obj;</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">`<span class="subst">$&#123;attr.name&#125;</span>:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(attr.value)&#125;</span>,`</span></span><br><span class="line">    &#125;); <span class="comment">/* 循环后：str === id:&quot;app&quot;,title:&quot;标题&quot;, */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3.拼接上外层的&#123;&#125;，并去掉&#123;&#125;中最后一个逗号(,)*/</span></span><br><span class="line">    str = <span class="string">`&#123; <span class="subst">$&#123;str.slice(<span class="number">0</span>, -<span class="number">1</span>)&#125;</span> &#125;`</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateChildren</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> children = el.children;</span><br><span class="line">    <span class="keyword">return</span> (children &amp;&amp; children.length &gt; <span class="number">0</span>) ? <span class="string">`<span class="subst">$&#123;children.map(c =&gt; generate(c)).join(<span class="string">&#x27;,&#x27;</span>)&#125;</span>`</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node.nodeType == <span class="number">1</span> ? generateRenderString(node) : generateText(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateText</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tokens = [];</span><br><span class="line">    <span class="keyword">let</span> match, index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取文本内容 */</span></span><br><span class="line">    <span class="keyword">let</span> text = node.text;</span><br><span class="line">    <span class="comment">// console.log(&#x27;node&#x27;, node);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*如果是全局匹配 那么每次匹配的时候都需要将 lastIndex 调整到0*/</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex = defaultTagRE.lastIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 正则匹配(匹配插值语法部分的内容) */</span></span><br><span class="line">    <span class="keyword">while</span> (match = defaultTagRE.exec(text)) &#123;</span><br><span class="line">        index = match.index;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; lastIndex) &#123;</span><br><span class="line">            tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex, index)));</span><br><span class="line">        &#125;</span><br><span class="line">        tokens.push(<span class="string">`_s(<span class="subst">$&#123;match[<span class="number">1</span>].trim()&#125;</span>)`</span>);</span><br><span class="line">        lastIndex = index + match[<span class="number">0</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lastIndex &lt; text.length) &#123;</span><br><span class="line">        tokens.push(<span class="built_in">JSON</span>.stringify(text.slice(lastIndex)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_v(<span class="subst">$&#123;tokens.join(<span class="string">&#x27; + &#x27;</span>)&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 核心函数：完成每个部分字符串(标签名 &amp;&amp; 属性节点 &amp;&amp; 子节点)的拼接 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRenderString</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> children = generateChildren(el);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_c(&quot;<span class="subst">$&#123;el.tag&#125;</span>&quot;,<span class="subst">$&#123;el.attrs.length ? generateAttrs(el.attrs) : <span class="string">&#x27;null&#x27;</span>&#125;</span><span class="subst">$&#123; children ? <span class="string">`,<span class="subst">$&#123;children&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compilerToFunction</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Html-&gt;AST */</span></span><br><span class="line">    <span class="keyword">let</span> root = compiler(template);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* AST-&gt;RenderString */</span></span><br><span class="line">    <span class="keyword">let</span> renderString = generateRenderString(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* RenderString-&gt;RenderFunction */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">`with(this)&#123; return <span class="subst">$&#123;renderString&#125;</span>&#125;`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第二部分代码：主要处理虚拟 DOM 的生成 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$options = options;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果传入了 el | el + template  */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.$options.el) <span class="built_in">this</span>.$mount(<span class="built_in">this</span>.$options.el);</span><br><span class="line">    &#125;</span><br><span class="line">    $mount(el) &#123;</span><br><span class="line">        <span class="keyword">let</span> v_node;</span><br><span class="line">        <span class="comment">/* 挂载函数 */</span></span><br><span class="line">        el = <span class="built_in">document</span>.querySelector(el);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 考虑：el + template + render函数的优先级关系 */</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.$options.render) &#123;</span><br><span class="line">            <span class="comment">// 对模板进行编译</span></span><br><span class="line">            <span class="keyword">let</span> template = <span class="built_in">this</span>.$options.template; <span class="comment">// 取出模板</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 如果没有仅仅是传入 el的情况那么就获取outerHTML */</span></span><br><span class="line">            <span class="keyword">if</span> (!template &amp;&amp; el) &#123;</span><br><span class="line">                template = el.outerHTML;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 无论传入的是 el || template  */</span></span><br><span class="line">            <span class="comment">/* 最终根据 template 标签字符串创建 render 函数 */</span></span><br><span class="line">            <span class="built_in">this</span>.$options.render = compilerToFunction(template).bind(<span class="built_in">this</span>);</span><br><span class="line">            v_node = <span class="built_in">this</span>.$options.render();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 如何创建？ */</span></span><br><span class="line">            <span class="built_in">this</span>.render = <span class="built_in">this</span>.$options.render;</span><br><span class="line">            v_node = <span class="built_in">this</span>.render(<span class="built_in">this</span>._c.bind(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;v_node&#x27;</span>, v_node);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">_c</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">/* 创建标签节点 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.createElement(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">_v</span>(<span class="params">text</span>)</span> &#123;</span><br><span class="line">        <span class="comment">/* 创建文本节点 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.createTextNode(text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">_s</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="comment">/* 编译插值 */</span></span><br><span class="line">     <span class="keyword">return</span> val == <span class="literal">null</span> ? <span class="string">&#x27;&#x27;</span>:(<span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span>?<span class="built_in">JSON</span>.stringify(val):val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">createElement</span>(<span class="params">tag, data = &#123;&#125;, ...children</span>)</span> &#123;</span><br><span class="line">        <span class="comment">/* 创建标签节点的实现函数 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.v_node(tag, data, <span class="literal">null</span>, children, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">createTextNode</span>(<span class="params">text</span>)</span> &#123;</span><br><span class="line">        <span class="comment">/* 创建文本内容的实现函数 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.v_node(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">v_node</span>(<span class="params">tag, data, key, children, text</span>)</span> &#123;</span><br><span class="line">        <span class="comment">/* 创建虚拟 DOM ：把所有的数据都组织成对象返回 */</span></span><br><span class="line">        <span class="keyword">return</span> &#123; tag, data, key, children, text &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第三部分：测试代码 */</span></span><br><span class="line"><span class="comment">/* 第一种方式 */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第二种方式 */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;a id=&quot;app&quot; title=&quot;标题&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;hello&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;My name is &#123;&#123;name&#125;&#125; &lt;/span&gt;</span></span><br><span class="line"><span class="string">               &lt;/a&gt;`</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第三种方式 */</span></span><br><span class="line"><span class="keyword">let</span> vm3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params">c</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c(<span class="string">&#x27;div&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&quot;testID&quot;</span></span><br><span class="line">        &#125;, c(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;我是a&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">vm3.$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p>在上面的代码中，第一部分代码大部分来自于<a href="http://wendingding.com/2019/04/10/Gossip%20-%20ast%20&&%20render/"> ast &amp;&amp; render </a>这篇博客，略有修改,把三种(挂载)渲染方式的情况下生成的虚拟 DOM 对象打印出来(参考下图)。</p><img src='../../../../src/virtual_t.png'><img src='../../../../z.png' width="200px"><ul><li>Posted by 博客园·<a href="http://www.cnblogs.com/wendingding/">文顶顶</a> | <a href="http://wendingding.com/">花田半亩</a></li><li>联系作者 简书·<a href="http://www.jianshu.com/users/c5703017b9f5/latest_articleshttp://www.jianshu.com/users/c5703017b9f5/latest_articles">文顶顶</a> 新浪微博·<a href="http://weibo.com/p/1005053800117445/home?from=page_100505&mod=TAB#place">Coder_文顶顶</a></li><li>原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://www.cnblogs.com/wendingding/">文顶顶</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;tip&#39;&gt;在 [ast &amp;&amp; render](http://wendingding.com/2019/08/26/Gossip%20-%20ast%20&amp;&amp;%20render/) 这篇文章中介绍了 ast 树和 render函数生成的过程，本文介绍通过 `</summary>
      
    
    
    
    
    <category term="Gossip" scheme="https://weibo.com/u/3800117445/tags/Gossip/"/>
    
  </entry>
  
</feed>
